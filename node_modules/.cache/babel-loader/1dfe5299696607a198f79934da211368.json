{"ast":null,"code":"var Vec3 = require('../math/Vec3');\n\nmodule.exports = RaycastResult;\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\n\nfunction RaycastResult() {\n  /**\n   * @property {Vec3} rayFromWorld\n   */\n  this.rayFromWorld = new Vec3();\n  /**\n   * @property {Vec3} rayToWorld\n   */\n\n  this.rayToWorld = new Vec3();\n  /**\n   * @property {Vec3} hitNormalWorld\n   */\n\n  this.hitNormalWorld = new Vec3();\n  /**\n   * @property {Vec3} hitPointWorld\n   */\n\n  this.hitPointWorld = new Vec3();\n  /**\n   * @property {boolean} hasHit\n   */\n\n  this.hasHit = false;\n  /**\n   * The hit shape, or null.\n   * @property {Shape} shape\n   */\n\n  this.shape = null;\n  /**\n   * The hit body, or null.\n   * @property {Body} body\n   */\n\n  this.body = null;\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh.\n   * @property {number} hitFaceIndex\n   * @default -1\n   */\n\n  this.hitFaceIndex = -1;\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit.\n   * @property {number} distance\n   * @default -1\n   */\n\n  this.distance = -1;\n  /**\n   * If the ray should stop traversing the bodies.\n   * @private\n   * @property {Boolean} _shouldStop\n   * @default false\n   */\n\n  this._shouldStop = false;\n}\n/**\n * Reset all result data.\n * @method reset\n */\n\n\nRaycastResult.prototype.reset = function () {\n  this.rayFromWorld.setZero();\n  this.rayToWorld.setZero();\n  this.hitNormalWorld.setZero();\n  this.hitPointWorld.setZero();\n  this.hasHit = false;\n  this.shape = null;\n  this.body = null;\n  this.hitFaceIndex = -1;\n  this.distance = -1;\n  this._shouldStop = false;\n};\n/**\n * @method abort\n */\n\n\nRaycastResult.prototype.abort = function () {\n  this._shouldStop = true;\n};\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\n\n\nRaycastResult.prototype.set = function (rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n  this.rayFromWorld.copy(rayFromWorld);\n  this.rayToWorld.copy(rayToWorld);\n  this.hitNormalWorld.copy(hitNormalWorld);\n  this.hitPointWorld.copy(hitPointWorld);\n  this.shape = shape;\n  this.body = body;\n  this.distance = distance;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/collision/RaycastResult.js"],"names":["Vec3","require","module","exports","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","shape","body","hitFaceIndex","distance","_shouldStop","prototype","reset","setZero","abort","set","copy"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,GAAwB;AAEvB;AACD;AACA;AACC,OAAKC,YAAL,GAAoB,IAAIL,IAAJ,EAApB;AAEA;AACD;AACA;;AACC,OAAKM,UAAL,GAAkB,IAAIN,IAAJ,EAAlB;AAEA;AACD;AACA;;AACC,OAAKO,cAAL,GAAsB,IAAIP,IAAJ,EAAtB;AAEA;AACD;AACA;;AACC,OAAKQ,aAAL,GAAqB,IAAIR,IAAJ,EAArB;AAEA;AACD;AACA;;AACC,OAAKS,MAAL,GAAc,KAAd;AAEA;AACD;AACA;AACA;;AACC,OAAKC,KAAL,GAAa,IAAb;AAEA;AACD;AACA;AACA;;AACC,OAAKC,IAAL,GAAY,IAAZ;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKC,YAAL,GAAoB,CAAC,CAArB;AAEA;AACD;AACA;AACA;AACA;;AACC,OAAKC,QAAL,GAAgB,CAAC,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;;AACC,OAAKC,WAAL,GAAmB,KAAnB;AACA;AAED;AACA;AACA;AACA;;;AACAV,aAAa,CAACW,SAAd,CAAwBC,KAAxB,GAAgC,YAAY;AAC3C,OAAKX,YAAL,CAAkBY,OAAlB;AACA,OAAKX,UAAL,CAAgBW,OAAhB;AACA,OAAKV,cAAL,CAAoBU,OAApB;AACA,OAAKT,aAAL,CAAmBS,OAAnB;AACA,OAAKR,MAAL,GAAc,KAAd;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,YAAL,GAAoB,CAAC,CAArB;AACA,OAAKC,QAAL,GAAgB,CAAC,CAAjB;AACA,OAAKC,WAAL,GAAmB,KAAnB;AACA,CAXD;AAaA;AACA;AACA;;;AACAV,aAAa,CAACW,SAAd,CAAwBG,KAAxB,GAAgC,YAAU;AACzC,OAAKJ,WAAL,GAAmB,IAAnB;AACA,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,aAAa,CAACW,SAAd,CAAwBI,GAAxB,GAA8B,UAC7Bd,YAD6B,EAE7BC,UAF6B,EAG7BC,cAH6B,EAI7BC,aAJ6B,EAK7BE,KAL6B,EAM7BC,IAN6B,EAO7BE,QAP6B,EAQ7B;AACA,OAAKR,YAAL,CAAkBe,IAAlB,CAAuBf,YAAvB;AACA,OAAKC,UAAL,CAAgBc,IAAhB,CAAqBd,UAArB;AACA,OAAKC,cAAL,CAAoBa,IAApB,CAAyBb,cAAzB;AACA,OAAKC,aAAL,CAAmBY,IAAnB,CAAwBZ,aAAxB;AACA,OAAKE,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKE,QAAL,GAAgBA,QAAhB;AACA,CAhBD","sourcesContent":["var Vec3 = require('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};"]},"metadata":{},"sourceType":"script"}