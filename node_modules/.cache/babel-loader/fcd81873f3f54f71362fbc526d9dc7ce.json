{"ast":null,"code":"module.exports = Shape;\n\nvar Shape = require('./Shape');\n\nvar Vec3 = require('../math/Vec3');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar Material = require('../material/Material');\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @param {object} [options]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=-1]\n * @param {number} [options.collisionResponse=true]\n * @param {number} [options.material=null]\n * @author schteppe\n */\n\n\nfunction Shape(options) {\n  options = options || {};\n  /**\n   * Identifyer of the Shape.\n   * @property {number} id\n   */\n\n  this.id = Shape.idCounter++;\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   * @property type\n   * @type {Number}\n   * @see Shape.types\n   */\n\n  this.type = options.type || 0;\n  /**\n   * The local bounding sphere radius of this shape.\n   * @property {Number} boundingSphereRadius\n   */\n\n  this.boundingSphereRadius = 0;\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @property {boolean} collisionResponse\n   */\n\n  this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n  /**\n   * @property {Number} collisionFilterGroup\n   */\n\n  this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n  /**\n   * @property {Number} collisionFilterMask\n   */\n\n  this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n  /**\n   * @property {Material} material\n   */\n\n  this.material = options.material ? options.material : null;\n  /**\n   * @property {Body} body\n   */\n\n  this.body = null;\n}\n\nShape.prototype.constructor = Shape;\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n */\n\nShape.prototype.updateBoundingSphereRadius = function () {\n  throw \"computeBoundingSphereRadius() not implemented for shape type \" + this.type;\n};\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\n\n\nShape.prototype.volume = function () {\n  throw \"volume() not implemented for shape type \" + this.type;\n};\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @param {Number} mass\n * @param {Vec3} target\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\n\n\nShape.prototype.calculateLocalInertia = function (mass, target) {\n  throw \"calculateLocalInertia() not implemented for shape type \" + this.type;\n};\n\nShape.idCounter = 0;\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\n\nShape.types = {\n  SPHERE: 1,\n  PLANE: 2,\n  BOX: 4,\n  COMPOUND: 8,\n  CONVEXPOLYHEDRON: 16,\n  HEIGHTFIELD: 32,\n  PARTICLE: 64,\n  CYLINDER: 128,\n  TRIMESH: 256\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/shapes/Shape.js"],"names":["module","exports","Shape","require","Vec3","Quaternion","Material","options","id","idCounter","type","boundingSphereRadius","collisionResponse","collisionFilterGroup","undefined","collisionFilterMask","material","body","prototype","constructor","updateBoundingSphereRadius","volume","calculateLocalInertia","mass","target","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,sBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASD,KAAT,CAAeK,OAAf,EAAuB;AACnBA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,EAAL,GAAUN,KAAK,CAACO,SAAN,EAAV;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,OAAKC,IAAL,GAAYH,OAAO,CAACG,IAAR,IAAgB,CAA5B;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,oBAAL,GAA4B,CAA5B;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,iBAAL,GAAyBL,OAAO,CAACK,iBAAR,GAA4BL,OAAO,CAACK,iBAApC,GAAwD,IAAjF;AAEA;AACJ;AACA;;AACI,OAAKC,oBAAL,GAA4BN,OAAO,CAACM,oBAAR,KAAiCC,SAAjC,GAA6CP,OAAO,CAACM,oBAArD,GAA4E,CAAxG;AAEA;AACJ;AACA;;AACI,OAAKE,mBAAL,GAA2BR,OAAO,CAACQ,mBAAR,KAAgCD,SAAhC,GAA4CP,OAAO,CAACQ,mBAApD,GAA0E,CAAC,CAAtG;AAEA;AACJ;AACA;;AACI,OAAKC,QAAL,GAAgBT,OAAO,CAACS,QAAR,GAAmBT,OAAO,CAACS,QAA3B,GAAsC,IAAtD;AAEA;AACJ;AACA;;AACI,OAAKC,IAAL,GAAY,IAAZ;AACH;;AACDf,KAAK,CAACgB,SAAN,CAAgBC,WAAhB,GAA8BjB,KAA9B;AAEA;AACA;AACA;AACA;;AACAA,KAAK,CAACgB,SAAN,CAAgBE,0BAAhB,GAA6C,YAAU;AACnD,QAAM,kEAAgE,KAAKV,IAA3E;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAR,KAAK,CAACgB,SAAN,CAAgBG,MAAhB,GAAyB,YAAU;AAC/B,QAAM,6CAA2C,KAAKX,IAAtD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,KAAK,CAACgB,SAAN,CAAgBI,qBAAhB,GAAwC,UAASC,IAAT,EAAcC,MAAd,EAAqB;AACzD,QAAM,4DAA0D,KAAKd,IAArE;AACH,CAFD;;AAIAR,KAAK,CAACO,SAAN,GAAkB,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAP,KAAK,CAACuB,KAAN,GAAc;AACVC,EAAAA,MAAM,EAAC,CADG;AAEVC,EAAAA,KAAK,EAAC,CAFI;AAGVC,EAAAA,GAAG,EAAC,CAHM;AAIVC,EAAAA,QAAQ,EAAC,CAJC;AAKVC,EAAAA,gBAAgB,EAAC,EALP;AAMVC,EAAAA,WAAW,EAAC,EANF;AAOVC,EAAAA,QAAQ,EAAC,EAPC;AAQVC,EAAAA,QAAQ,EAAC,GARC;AASVC,EAAAA,OAAO,EAAC;AATE,CAAd","sourcesContent":["module.exports = Shape;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Material = require('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @param {object} [options]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=-1]\n * @param {number} [options.collisionResponse=true]\n * @param {number} [options.material=null]\n * @author schteppe\n */\nfunction Shape(options){\n    options = options || {};\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = options.type || 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = options.material ? options.material : null;\n\n    /**\n     * @property {Body} body\n     */\n    this.body = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @param {Number} mass\n * @param {Vec3} target\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n"]},"metadata":{},"sourceType":"script"}