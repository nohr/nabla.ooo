{"ast":null,"code":"module.exports = NaiveBroadphase;\n\nvar Broadphase = require('./Broadphase');\n\nvar AABB = require('./AABB');\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\n\n\nfunction NaiveBroadphase() {\n  Broadphase.apply(this);\n}\n\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\n\nNaiveBroadphase.prototype.collisionPairs = function (world, pairs1, pairs2) {\n  var bodies = world.bodies,\n      n = bodies.length,\n      i,\n      j,\n      bi,\n      bj; // Naive N^2 ftw!\n\n  for (i = 0; i !== n; i++) {\n    for (j = 0; j !== i; j++) {\n      bi = bodies[i];\n      bj = bodies[j];\n\n      if (!this.needBroadphaseCollision(bi, bj)) {\n        continue;\n      }\n\n      this.intersectionTest(bi, bj, pairs1, pairs2);\n    }\n  }\n};\n\nvar tmpAABB = new AABB();\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\n\nNaiveBroadphase.prototype.aabbQuery = function (world, aabb, result) {\n  result = result || [];\n\n  for (var i = 0; i < world.bodies.length; i++) {\n    var b = world.bodies[i];\n\n    if (b.aabbNeedsUpdate) {\n      b.computeAABB();\n    } // Ugly hack until Body gets aabb\n\n\n    if (b.aabb.overlaps(aabb)) {\n      result.push(b);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/collision/NaiveBroadphase.js"],"names":["module","exports","NaiveBroadphase","Broadphase","require","AABB","apply","prototype","constructor","collisionPairs","world","pairs1","pairs2","bodies","n","length","i","j","bi","bj","needBroadphaseCollision","intersectionTest","tmpAABB","aabbQuery","aabb","result","b","aabbNeedsUpdate","computeAABB","overlaps","push"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,eAAjB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,eAAT,GAA0B;AACtBC,EAAAA,UAAU,CAACG,KAAX,CAAiB,IAAjB;AACH;;AACDJ,eAAe,CAACK,SAAhB,GAA4B,IAAIJ,UAAJ,EAA5B;AACAD,eAAe,CAACK,SAAhB,CAA0BC,WAA1B,GAAwCN,eAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,eAAe,CAACK,SAAhB,CAA0BE,cAA1B,GAA2C,UAASC,KAAT,EAAeC,MAAf,EAAsBC,MAAtB,EAA6B;AACpE,MAAIC,MAAM,GAAGH,KAAK,CAACG,MAAnB;AAAA,MACIC,CAAC,GAAGD,MAAM,CAACE,MADf;AAAA,MAEIC,CAFJ;AAAA,MAEMC,CAFN;AAAA,MAEQC,EAFR;AAAA,MAEWC,EAFX,CADoE,CAKpE;;AACA,OAAIH,CAAC,GAAC,CAAN,EAASA,CAAC,KAAGF,CAAb,EAAgBE,CAAC,EAAjB,EAAoB;AAChB,SAAIC,CAAC,GAAC,CAAN,EAASA,CAAC,KAAGD,CAAb,EAAgBC,CAAC,EAAjB,EAAoB;AAEhBC,MAAAA,EAAE,GAAGL,MAAM,CAACG,CAAD,CAAX;AACAG,MAAAA,EAAE,GAAGN,MAAM,CAACI,CAAD,CAAX;;AAEA,UAAG,CAAC,KAAKG,uBAAL,CAA6BF,EAA7B,EAAgCC,EAAhC,CAAJ,EAAwC;AACpC;AACH;;AAED,WAAKE,gBAAL,CAAsBH,EAAtB,EAAyBC,EAAzB,EAA4BR,MAA5B,EAAmCC,MAAnC;AACH;AACJ;AACJ,CAnBD;;AAqBA,IAAIU,OAAO,GAAG,IAAIjB,IAAJ,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,eAAe,CAACK,SAAhB,CAA0BgB,SAA1B,GAAsC,UAASb,KAAT,EAAgBc,IAAhB,EAAsBC,MAAtB,EAA6B;AAC/DA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AAEA,OAAI,IAAIT,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,KAAK,CAACG,MAAN,CAAaE,MAAhC,EAAwCC,CAAC,EAAzC,EAA4C;AACxC,QAAIU,CAAC,GAAGhB,KAAK,CAACG,MAAN,CAAaG,CAAb,CAAR;;AAEA,QAAGU,CAAC,CAACC,eAAL,EAAqB;AACjBD,MAAAA,CAAC,CAACE,WAAF;AACH,KALuC,CAOxC;;;AACA,QAAGF,CAAC,CAACF,IAAF,CAAOK,QAAP,CAAgBL,IAAhB,CAAH,EAAyB;AACrBC,MAAAA,MAAM,CAACK,IAAP,CAAYJ,CAAZ;AACH;AACJ;;AAED,SAAOD,MAAP;AACH,CAjBD","sourcesContent":["module.exports = NaiveBroadphase;\n\nvar Broadphase = require('./Broadphase');\nvar AABB = require('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};"]},"metadata":{},"sourceType":"script"}