{"ast":null,"code":"var Shape = require('../shapes/Shape');\n\nvar Broadphase = require('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\n\nfunction SAPBroadphase(world) {\n  Broadphase.apply(this);\n  /**\n   * List of bodies currently in the broadphase.\n   * @property axisList\n   * @type {Array}\n   */\n\n  this.axisList = [];\n  /**\n   * The world to search in.\n   * @property world\n   * @type {World}\n   */\n\n  this.world = null;\n  /**\n   * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n   * @property axisIndex\n   * @type {Number}\n   */\n\n  this.axisIndex = 0;\n  var axisList = this.axisList;\n\n  this._addBodyHandler = function (e) {\n    axisList.push(e.body);\n  };\n\n  this._removeBodyHandler = function (e) {\n    var idx = axisList.indexOf(e.body);\n\n    if (idx !== -1) {\n      axisList.splice(idx, 1);\n    }\n  };\n\n  if (world) {\n    this.setWorld(world);\n  }\n}\n\nSAPBroadphase.prototype = new Broadphase();\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\n\nSAPBroadphase.prototype.setWorld = function (world) {\n  // Clear the old axis array\n  this.axisList.length = 0; // Add all bodies from the new world\n\n  for (var i = 0; i < world.bodies.length; i++) {\n    this.axisList.push(world.bodies[i]);\n  } // Remove old handlers, if any\n\n\n  world.removeEventListener(\"addBody\", this._addBodyHandler);\n  world.removeEventListener(\"removeBody\", this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n  world.addEventListener(\"addBody\", this._addBodyHandler);\n  world.addEventListener(\"removeBody\", this._removeBodyHandler);\n  this.world = world;\n  this.dirty = true;\n};\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\n\n\nSAPBroadphase.insertionSortX = function (a) {\n  for (var i = 1, l = a.length; i < l; i++) {\n    var v = a[i];\n\n    for (var j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\n\n\nSAPBroadphase.insertionSortY = function (a) {\n  for (var i = 1, l = a.length; i < l; i++) {\n    var v = a[i];\n\n    for (var j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\n\n\nSAPBroadphase.insertionSortZ = function (a) {\n  for (var i = 1, l = a.length; i < l; i++) {\n    var v = a[i];\n\n    for (var j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\n\n\nSAPBroadphase.prototype.collisionPairs = function (world, p1, p2) {\n  var bodies = this.axisList,\n      N = bodies.length,\n      axisIndex = this.axisIndex,\n      i,\n      j;\n\n  if (this.dirty) {\n    this.sortList();\n    this.dirty = false;\n  } // Look through the list\n\n\n  for (i = 0; i !== N; i++) {\n    var bi = bodies[i];\n\n    for (j = i + 1; j < N; j++) {\n      var bj = bodies[j];\n\n      if (!this.needBroadphaseCollision(bi, bj)) {\n        continue;\n      }\n\n      if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n        break;\n      }\n\n      this.intersectionTest(bi, bj, p1, p2);\n    }\n  }\n};\n\nSAPBroadphase.prototype.sortList = function () {\n  var axisList = this.axisList;\n  var axisIndex = this.axisIndex;\n  var N = axisList.length; // Update AABBs\n\n  for (var i = 0; i !== N; i++) {\n    var bi = axisList[i];\n\n    if (bi.aabbNeedsUpdate) {\n      bi.computeAABB();\n    }\n  } // Sort the list\n\n\n  if (axisIndex === 0) {\n    SAPBroadphase.insertionSortX(axisList);\n  } else if (axisIndex === 1) {\n    SAPBroadphase.insertionSortY(axisList);\n  } else if (axisIndex === 2) {\n    SAPBroadphase.insertionSortZ(axisList);\n  }\n};\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\n\n\nSAPBroadphase.checkBounds = function (bi, bj, axisIndex) {\n  var biPos;\n  var bjPos;\n\n  if (axisIndex === 0) {\n    biPos = bi.position.x;\n    bjPos = bj.position.x;\n  } else if (axisIndex === 1) {\n    biPos = bi.position.y;\n    bjPos = bj.position.y;\n  } else if (axisIndex === 2) {\n    biPos = bi.position.z;\n    bjPos = bj.position.z;\n  }\n\n  var ri = bi.boundingRadius,\n      rj = bj.boundingRadius,\n      boundA1 = biPos - ri,\n      boundA2 = biPos + ri,\n      boundB1 = bjPos - rj,\n      boundB2 = bjPos + rj;\n  return boundB1 < boundA2;\n};\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\n\n\nSAPBroadphase.prototype.autoDetectAxis = function () {\n  var sumX = 0,\n      sumX2 = 0,\n      sumY = 0,\n      sumY2 = 0,\n      sumZ = 0,\n      sumZ2 = 0,\n      bodies = this.axisList,\n      N = bodies.length,\n      invN = 1 / N;\n\n  for (var i = 0; i !== N; i++) {\n    var b = bodies[i];\n    var centerX = b.position.x;\n    sumX += centerX;\n    sumX2 += centerX * centerX;\n    var centerY = b.position.y;\n    sumY += centerY;\n    sumY2 += centerY * centerY;\n    var centerZ = b.position.z;\n    sumZ += centerZ;\n    sumZ2 += centerZ * centerZ;\n  }\n\n  var varianceX = sumX2 - sumX * sumX * invN,\n      varianceY = sumY2 - sumY * sumY * invN,\n      varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n  if (varianceX > varianceY) {\n    if (varianceX > varianceZ) {\n      this.axisIndex = 0;\n    } else {\n      this.axisIndex = 2;\n    }\n  } else if (varianceY > varianceZ) {\n    this.axisIndex = 1;\n  } else {\n    this.axisIndex = 2;\n  }\n};\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\n\n\nSAPBroadphase.prototype.aabbQuery = function (world, aabb, result) {\n  result = result || [];\n\n  if (this.dirty) {\n    this.sortList();\n    this.dirty = false;\n  }\n\n  var axisIndex = this.axisIndex,\n      axis = 'x';\n\n  if (axisIndex === 1) {\n    axis = 'y';\n  }\n\n  if (axisIndex === 2) {\n    axis = 'z';\n  }\n\n  var axisList = this.axisList;\n  var lower = aabb.lowerBound[axis];\n  var upper = aabb.upperBound[axis];\n\n  for (var i = 0; i < axisList.length; i++) {\n    var b = axisList[i];\n\n    if (b.aabbNeedsUpdate) {\n      b.computeAABB();\n    }\n\n    if (b.aabb.overlaps(aabb)) {\n      result.push(b);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/collision/SAPBroadphase.js"],"names":["Shape","require","Broadphase","module","exports","SAPBroadphase","world","apply","axisList","axisIndex","_addBodyHandler","e","push","body","_removeBodyHandler","idx","indexOf","splice","setWorld","prototype","length","i","bodies","removeEventListener","addEventListener","dirty","insertionSortX","a","l","v","j","aabb","lowerBound","x","insertionSortY","y","insertionSortZ","z","collisionPairs","p1","p2","N","sortList","bi","bj","needBroadphaseCollision","checkBounds","intersectionTest","aabbNeedsUpdate","computeAABB","biPos","bjPos","position","ri","boundingRadius","rj","boundA1","boundA2","boundB1","boundB2","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","invN","b","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","aabbQuery","result","axis","lower","upper","upperBound","overlaps"],"mappings":"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","sourcesContent":["var Shape = require('../shapes/Shape');\nvar Broadphase = require('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};"]},"metadata":{},"sourceType":"script"}