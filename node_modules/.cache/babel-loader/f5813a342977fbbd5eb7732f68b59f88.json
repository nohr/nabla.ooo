{"ast":null,"code":"module.exports = Vec3;\n\nvar Mat3 = require('./Mat3');\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\n\n\nfunction Vec3(x, y, z) {\n  /**\n   * @property x\n   * @type {Number}\n   */\n  this.x = x || 0.0;\n  /**\n   * @property y\n   * @type {Number}\n   */\n\n  this.y = y || 0.0;\n  /**\n   * @property z\n   * @type {Number}\n   */\n\n  this.z = z || 0.0;\n}\n/**\n * @static\n * @property {Vec3} ZERO\n */\n\n\nVec3.ZERO = new Vec3(0, 0, 0);\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\n\nVec3.UNIT_X = new Vec3(1, 0, 0);\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\n\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\n\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\n\nVec3.prototype.cross = function (v, target) {\n  var vx = v.x,\n      vy = v.y,\n      vz = v.z,\n      x = this.x,\n      y = this.y,\n      z = this.z;\n  target = target || new Vec3();\n  target.x = y * vz - z * vy;\n  target.y = z * vx - x * vz;\n  target.z = x * vy - y * vx;\n  return target;\n};\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\n\n\nVec3.prototype.set = function (x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n};\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\n\n\nVec3.prototype.setZero = function () {\n  this.x = this.y = this.z = 0;\n};\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\n\n\nVec3.prototype.vadd = function (v, target) {\n  if (target) {\n    target.x = v.x + this.x;\n    target.y = v.y + this.y;\n    target.z = v.z + this.z;\n  } else {\n    return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n};\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\n\n\nVec3.prototype.vsub = function (v, target) {\n  if (target) {\n    target.x = this.x - v.x;\n    target.y = this.y - v.y;\n    target.z = this.z - v.z;\n  } else {\n    return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n};\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\n\n\nVec3.prototype.crossmat = function () {\n  return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n};\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\n\n\nVec3.prototype.normalize = function () {\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  var n = Math.sqrt(x * x + y * y + z * z);\n\n  if (n > 0.0) {\n    var invN = 1 / n;\n    this.x *= invN;\n    this.y *= invN;\n    this.z *= invN;\n  } else {\n    // Make something up\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n  }\n\n  return n;\n};\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\n\n\nVec3.prototype.unit = function (target) {\n  target = target || new Vec3();\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  var ninv = Math.sqrt(x * x + y * y + z * z);\n\n  if (ninv > 0.0) {\n    ninv = 1.0 / ninv;\n    target.x = x * ninv;\n    target.y = y * ninv;\n    target.z = z * ninv;\n  } else {\n    target.x = 1;\n    target.y = 0;\n    target.z = 0;\n  }\n\n  return target;\n};\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\n\n\nVec3.prototype.norm = function () {\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  return Math.sqrt(x * x + y * y + z * z);\n};\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\n\n\nVec3.prototype.length = Vec3.prototype.norm;\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\n\nVec3.prototype.norm2 = function () {\n  return this.dot(this);\n};\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\n\n\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\n\nVec3.prototype.distanceTo = function (p) {\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  var px = p.x,\n      py = p.y,\n      pz = p.z;\n  return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n};\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\n\n\nVec3.prototype.distanceSquared = function (p) {\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  var px = p.x,\n      py = p.y,\n      pz = p.z;\n  return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n};\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\n\n\nVec3.prototype.mult = function (scalar, target) {\n  target = target || new Vec3();\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  target.x = scalar * x;\n  target.y = scalar * y;\n  target.z = scalar * z;\n  return target;\n};\n/**\n * Multiply the vector with an other vector, component-wise.\n * @method mult\n * @param {Number} vector\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n */\n\n\nVec3.prototype.vmul = function (vector, target) {\n  target = target || new Vec3();\n  target.x = vector.x * this.x;\n  target.y = vector.y * this.y;\n  target.z = vector.z * this.z;\n  return target;\n};\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\n\n\nVec3.prototype.scale = Vec3.prototype.mult;\n/**\n * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n * @method addScaledVector\n * @param {Number} scalar\n * @param {Vec3} vector\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n */\n\nVec3.prototype.addScaledVector = function (scalar, vector, target) {\n  target = target || new Vec3();\n  target.x = this.x + scalar * vector.x;\n  target.y = this.y + scalar * vector.y;\n  target.z = this.z + scalar * vector.z;\n  return target;\n};\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\n\n\nVec3.prototype.dot = function (v) {\n  return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n/**\n * @method isZero\n * @return bool\n */\n\n\nVec3.prototype.isZero = function () {\n  return this.x === 0 && this.y === 0 && this.z === 0;\n};\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\n\n\nVec3.prototype.negate = function (target) {\n  target = target || new Vec3();\n  target.x = -this.x;\n  target.y = -this.y;\n  target.z = -this.z;\n  return target;\n};\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\n\n\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\n\nVec3.prototype.tangents = function (t1, t2) {\n  var norm = this.norm();\n\n  if (norm > 0.0) {\n    var n = Vec3_tangents_n;\n    var inorm = 1 / norm;\n    n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n    var randVec = Vec3_tangents_randVec;\n\n    if (Math.abs(n.x) < 0.9) {\n      randVec.set(1, 0, 0);\n      n.cross(randVec, t1);\n    } else {\n      randVec.set(0, 1, 0);\n      n.cross(randVec, t1);\n    }\n\n    n.cross(t1, t2);\n  } else {\n    // The normal length is zero, make something up\n    t1.set(1, 0, 0);\n    t2.set(0, 1, 0);\n  }\n};\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\n\n\nVec3.prototype.toString = function () {\n  return this.x + \",\" + this.y + \",\" + this.z;\n};\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\n\n\nVec3.prototype.toArray = function () {\n  return [this.x, this.y, this.z];\n};\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\n\n\nVec3.prototype.copy = function (source) {\n  this.x = source.x;\n  this.y = source.y;\n  this.z = source.z;\n  return this;\n};\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\n\n\nVec3.prototype.lerp = function (v, t, target) {\n  var x = this.x,\n      y = this.y,\n      z = this.z;\n  target.x = x + (v.x - x) * t;\n  target.y = y + (v.y - y) * t;\n  target.z = z + (v.z - z) * t;\n};\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\n\n\nVec3.prototype.almostEquals = function (v, precision) {\n  if (precision === undefined) {\n    precision = 1e-6;\n  }\n\n  if (Math.abs(this.x - v.x) > precision || Math.abs(this.y - v.y) > precision || Math.abs(this.z - v.z) > precision) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\n\n\nVec3.prototype.almostZero = function (precision) {\n  if (precision === undefined) {\n    precision = 1e-6;\n  }\n\n  if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n    return false;\n  }\n\n  return true;\n};\n\nvar antip_neg = new Vec3();\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\n\nVec3.prototype.isAntiparallelTo = function (v, precision) {\n  this.negate(antip_neg);\n  return antip_neg.almostEquals(v, precision);\n};\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\n\n\nVec3.prototype.clone = function () {\n  return new Vec3(this.x, this.y, this.z);\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/math/Vec3.js"],"names":["module","exports","Vec3","Mat3","require","x","y","z","ZERO","UNIT_X","UNIT_Y","UNIT_Z","prototype","cross","v","target","vx","vy","vz","set","setZero","vadd","vsub","crossmat","normalize","n","Math","sqrt","invN","unit","ninv","norm","length","norm2","dot","lengthSquared","distanceTo","p","px","py","pz","distanceSquared","mult","scalar","vmul","vector","scale","addScaledVector","isZero","negate","Vec3_tangents_n","Vec3_tangents_randVec","tangents","t1","t2","inorm","randVec","abs","toString","toArray","copy","source","lerp","t","almostEquals","precision","undefined","almostZero","antip_neg","isAntiparallelTo","clone"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,IAAT,CAAcG,CAAd,EAAgBC,CAAhB,EAAkBC,CAAlB,EAAoB;AAChB;AACJ;AACA;AACA;AACI,OAAKF,CAAL,GAASA,CAAC,IAAE,GAAZ;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,CAAL,GAASA,CAAC,IAAE,GAAZ;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,CAAL,GAASA,CAAC,IAAE,GAAZ;AACH;AAED;AACA;AACA;AACA;;;AACAL,IAAI,CAACM,IAAL,GAAY,IAAIN,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAZ;AAEA;AACA;AACA;AACA;;AACAA,IAAI,CAACO,MAAL,GAAc,IAAIP,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAd;AAEA;AACA;AACA;AACA;;AACAA,IAAI,CAACQ,MAAL,GAAc,IAAIR,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAd;AAEA;AACA;AACA;AACA;;AACAA,IAAI,CAACS,MAAL,GAAc,IAAIT,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,IAAI,CAACU,SAAL,CAAeC,KAAf,GAAuB,UAASC,CAAT,EAAWC,MAAX,EAAkB;AACrC,MAAIC,EAAE,GAACF,CAAC,CAACT,CAAT;AAAA,MAAYY,EAAE,GAACH,CAAC,CAACR,CAAjB;AAAA,MAAoBY,EAAE,GAACJ,CAAC,CAACP,CAAzB;AAAA,MAA4BF,CAAC,GAAC,KAAKA,CAAnC;AAAA,MAAsCC,CAAC,GAAC,KAAKA,CAA7C;AAAA,MAAgDC,CAAC,GAAC,KAAKA,CAAvD;AACAQ,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AAEAa,EAAAA,MAAM,CAACV,CAAP,GAAYC,CAAC,GAAGY,EAAL,GAAYX,CAAC,GAAGU,EAA3B;AACAF,EAAAA,MAAM,CAACT,CAAP,GAAYC,CAAC,GAAGS,EAAL,GAAYX,CAAC,GAAGa,EAA3B;AACAH,EAAAA,MAAM,CAACR,CAAP,GAAYF,CAAC,GAAGY,EAAL,GAAYX,CAAC,GAAGU,EAA3B;AAEA,SAAOD,MAAP;AACH,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACU,SAAL,CAAeO,GAAf,GAAqB,UAASd,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAe;AAChC,OAAKF,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,SAAO,IAAP;AACH,CALD;AAOA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeQ,OAAf,GAAyB,YAAU;AAC/B,OAAKf,CAAL,GAAS,KAAKC,CAAL,GAAS,KAAKC,CAAL,GAAS,CAA3B;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeS,IAAf,GAAsB,UAASP,CAAT,EAAWC,MAAX,EAAkB;AACpC,MAAGA,MAAH,EAAU;AACNA,IAAAA,MAAM,CAACV,CAAP,GAAWS,CAAC,CAACT,CAAF,GAAM,KAAKA,CAAtB;AACAU,IAAAA,MAAM,CAACT,CAAP,GAAWQ,CAAC,CAACR,CAAF,GAAM,KAAKA,CAAtB;AACAS,IAAAA,MAAM,CAACR,CAAP,GAAWO,CAAC,CAACP,CAAF,GAAM,KAAKA,CAAtB;AACH,GAJD,MAIO;AACH,WAAO,IAAIL,IAAJ,CAAS,KAAKG,CAAL,GAASS,CAAC,CAACT,CAApB,EACgB,KAAKC,CAAL,GAASQ,CAAC,CAACR,CAD3B,EAEgB,KAAKC,CAAL,GAASO,CAAC,CAACP,CAF3B,CAAP;AAGH;AACJ,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeU,IAAf,GAAsB,UAASR,CAAT,EAAWC,MAAX,EAAkB;AACpC,MAAGA,MAAH,EAAU;AACNA,IAAAA,MAAM,CAACV,CAAP,GAAW,KAAKA,CAAL,GAASS,CAAC,CAACT,CAAtB;AACAU,IAAAA,MAAM,CAACT,CAAP,GAAW,KAAKA,CAAL,GAASQ,CAAC,CAACR,CAAtB;AACAS,IAAAA,MAAM,CAACR,CAAP,GAAW,KAAKA,CAAL,GAASO,CAAC,CAACP,CAAtB;AACH,GAJD,MAIO;AACH,WAAO,IAAIL,IAAJ,CAAS,KAAKG,CAAL,GAAOS,CAAC,CAACT,CAAlB,EACgB,KAAKC,CAAL,GAAOQ,CAAC,CAACR,CADzB,EAEgB,KAAKC,CAAL,GAAOO,CAAC,CAACP,CAFzB,CAAP;AAGH;AACJ,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeW,QAAf,GAA0B,YAAU;AAChC,SAAO,IAAIpB,IAAJ,CAAS,CAAM,CAAN,EAAU,CAAC,KAAKI,CAAhB,EAAqB,KAAKD,CAA1B,EACQ,KAAKC,CADb,EACuB,CADvB,EAC2B,CAAC,KAAKF,CADjC,EAEO,CAAC,KAAKC,CAFb,EAEkB,KAAKD,CAFvB,EAEiC,CAFjC,CAAT,CAAP;AAGH,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACAH,IAAI,CAACU,SAAL,CAAeY,SAAf,GAA2B,YAAU;AACjC,MAAInB,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACA,MAAIkB,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUtB,CAAC,GAACA,CAAF,GAAMC,CAAC,GAACA,CAAR,GAAYC,CAAC,GAACA,CAAxB,CAAR;;AACA,MAAGkB,CAAC,GAAC,GAAL,EAAS;AACL,QAAIG,IAAI,GAAG,IAAEH,CAAb;AACA,SAAKpB,CAAL,IAAUuB,IAAV;AACA,SAAKtB,CAAL,IAAUsB,IAAV;AACA,SAAKrB,CAAL,IAAUqB,IAAV;AACH,GALD,MAKO;AACH;AACA,SAAKvB,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACH;;AACD,SAAOkB,CAAP;AACH,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,IAAI,CAACU,SAAL,CAAeiB,IAAf,GAAsB,UAASd,MAAT,EAAgB;AAClCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACA,MAAIG,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACA,MAAIuB,IAAI,GAAGJ,IAAI,CAACC,IAAL,CAAUtB,CAAC,GAACA,CAAF,GAAMC,CAAC,GAACA,CAAR,GAAYC,CAAC,GAACA,CAAxB,CAAX;;AACA,MAAGuB,IAAI,GAAC,GAAR,EAAY;AACRA,IAAAA,IAAI,GAAG,MAAIA,IAAX;AACAf,IAAAA,MAAM,CAACV,CAAP,GAAWA,CAAC,GAAGyB,IAAf;AACAf,IAAAA,MAAM,CAACT,CAAP,GAAWA,CAAC,GAAGwB,IAAf;AACAf,IAAAA,MAAM,CAACR,CAAP,GAAWA,CAAC,GAAGuB,IAAf;AACH,GALD,MAKO;AACHf,IAAAA,MAAM,CAACV,CAAP,GAAW,CAAX;AACAU,IAAAA,MAAM,CAACT,CAAP,GAAW,CAAX;AACAS,IAAAA,MAAM,CAACR,CAAP,GAAW,CAAX;AACH;;AACD,SAAOQ,MAAP;AACH,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACU,SAAL,CAAemB,IAAf,GAAsB,YAAU;AAC5B,MAAI1B,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACA,SAAOmB,IAAI,CAACC,IAAL,CAAUtB,CAAC,GAACA,CAAF,GAAMC,CAAC,GAACA,CAAR,GAAYC,CAAC,GAACA,CAAxB,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeoB,MAAf,GAAwB9B,IAAI,CAACU,SAAL,CAAemB,IAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA7B,IAAI,CAACU,SAAL,CAAeqB,KAAf,GAAuB,YAAU;AAC7B,SAAO,KAAKC,GAAL,CAAS,IAAT,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAhC,IAAI,CAACU,SAAL,CAAeuB,aAAf,GAA+BjC,IAAI,CAACU,SAAL,CAAeqB,KAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA/B,IAAI,CAACU,SAAL,CAAewB,UAAf,GAA4B,UAASC,CAAT,EAAW;AACnC,MAAIhC,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACA,MAAI+B,EAAE,GAACD,CAAC,CAAChC,CAAT;AAAA,MAAYkC,EAAE,GAACF,CAAC,CAAC/B,CAAjB;AAAA,MAAoBkC,EAAE,GAACH,CAAC,CAAC9B,CAAzB;AACA,SAAOmB,IAAI,CAACC,IAAL,CAAU,CAACW,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,IACA,CAACkC,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,CADA,GAEA,CAACkC,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,CAFV,CAAP;AAGH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAe6B,eAAf,GAAiC,UAASJ,CAAT,EAAW;AACxC,MAAIhC,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACA,MAAI+B,EAAE,GAACD,CAAC,CAAChC,CAAT;AAAA,MAAYkC,EAAE,GAACF,CAAC,CAAC/B,CAAjB;AAAA,MAAoBkC,EAAE,GAACH,CAAC,CAAC9B,CAAzB;AACA,SAAO,CAAC+B,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,IAAgB,CAACkC,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,CAAhB,GAAgC,CAACkC,EAAE,GAACjC,CAAJ,KAAQiC,EAAE,GAACjC,CAAX,CAAvC;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAe8B,IAAf,GAAsB,UAASC,MAAT,EAAgB5B,MAAhB,EAAuB;AACzCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACA,MAAIG,CAAC,GAAG,KAAKA,CAAb;AAAA,MACIC,CAAC,GAAG,KAAKA,CADb;AAAA,MAEIC,CAAC,GAAG,KAAKA,CAFb;AAGAQ,EAAAA,MAAM,CAACV,CAAP,GAAWsC,MAAM,GAAGtC,CAApB;AACAU,EAAAA,MAAM,CAACT,CAAP,GAAWqC,MAAM,GAAGrC,CAApB;AACAS,EAAAA,MAAM,CAACR,CAAP,GAAWoC,MAAM,GAAGpC,CAApB;AACA,SAAOQ,MAAP;AACH,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACU,SAAL,CAAegC,IAAf,GAAsB,UAASC,MAAT,EAAiB9B,MAAjB,EAAwB;AAC1CA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACAa,EAAAA,MAAM,CAACV,CAAP,GAAWwC,MAAM,CAACxC,CAAP,GAAW,KAAKA,CAA3B;AACAU,EAAAA,MAAM,CAACT,CAAP,GAAWuC,MAAM,CAACvC,CAAP,GAAW,KAAKA,CAA3B;AACAS,EAAAA,MAAM,CAACR,CAAP,GAAWsC,MAAM,CAACtC,CAAP,GAAW,KAAKA,CAA3B;AACA,SAAOQ,MAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACU,SAAL,CAAekC,KAAf,GAAuB5C,IAAI,CAACU,SAAL,CAAe8B,IAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAxC,IAAI,CAACU,SAAL,CAAemC,eAAf,GAAiC,UAASJ,MAAT,EAAiBE,MAAjB,EAAyB9B,MAAzB,EAAgC;AAC7DA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACAa,EAAAA,MAAM,CAACV,CAAP,GAAW,KAAKA,CAAL,GAASsC,MAAM,GAAGE,MAAM,CAACxC,CAApC;AACAU,EAAAA,MAAM,CAACT,CAAP,GAAW,KAAKA,CAAL,GAASqC,MAAM,GAAGE,MAAM,CAACvC,CAApC;AACAS,EAAAA,MAAM,CAACR,CAAP,GAAW,KAAKA,CAAL,GAASoC,MAAM,GAAGE,MAAM,CAACtC,CAApC;AACA,SAAOQ,MAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACU,SAAL,CAAesB,GAAf,GAAqB,UAASpB,CAAT,EAAW;AAC5B,SAAO,KAAKT,CAAL,GAASS,CAAC,CAACT,CAAX,GAAe,KAAKC,CAAL,GAASQ,CAAC,CAACR,CAA1B,GAA8B,KAAKC,CAAL,GAASO,CAAC,CAACP,CAAhD;AACH,CAFD;AAIA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeoC,MAAf,GAAwB,YAAU;AAC9B,SAAO,KAAK3C,CAAL,KAAS,CAAT,IAAc,KAAKC,CAAL,KAAS,CAAvB,IAA4B,KAAKC,CAAL,KAAS,CAA5C;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAeqC,MAAf,GAAwB,UAASlC,MAAT,EAAgB;AACpCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACAa,EAAAA,MAAM,CAACV,CAAP,GAAW,CAAC,KAAKA,CAAjB;AACAU,EAAAA,MAAM,CAACT,CAAP,GAAW,CAAC,KAAKA,CAAjB;AACAS,EAAAA,MAAM,CAACR,CAAP,GAAW,CAAC,KAAKA,CAAjB;AACA,SAAOQ,MAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAImC,eAAe,GAAG,IAAIhD,IAAJ,EAAtB;AACA,IAAIiD,qBAAqB,GAAG,IAAIjD,IAAJ,EAA5B;;AACAA,IAAI,CAACU,SAAL,CAAewC,QAAf,GAA0B,UAASC,EAAT,EAAYC,EAAZ,EAAe;AACrC,MAAIvB,IAAI,GAAG,KAAKA,IAAL,EAAX;;AACA,MAAGA,IAAI,GAAC,GAAR,EAAY;AACR,QAAIN,CAAC,GAAGyB,eAAR;AACA,QAAIK,KAAK,GAAG,IAAExB,IAAd;AACAN,IAAAA,CAAC,CAACN,GAAF,CAAM,KAAKd,CAAL,GAAOkD,KAAb,EAAmB,KAAKjD,CAAL,GAAOiD,KAA1B,EAAgC,KAAKhD,CAAL,GAAOgD,KAAvC;AACA,QAAIC,OAAO,GAAGL,qBAAd;;AACA,QAAGzB,IAAI,CAAC+B,GAAL,CAAShC,CAAC,CAACpB,CAAX,IAAgB,GAAnB,EAAuB;AACnBmD,MAAAA,OAAO,CAACrC,GAAR,CAAY,CAAZ,EAAc,CAAd,EAAgB,CAAhB;AACAM,MAAAA,CAAC,CAACZ,KAAF,CAAQ2C,OAAR,EAAgBH,EAAhB;AACH,KAHD,MAGO;AACHG,MAAAA,OAAO,CAACrC,GAAR,CAAY,CAAZ,EAAc,CAAd,EAAgB,CAAhB;AACAM,MAAAA,CAAC,CAACZ,KAAF,CAAQ2C,OAAR,EAAgBH,EAAhB;AACH;;AACD5B,IAAAA,CAAC,CAACZ,KAAF,CAAQwC,EAAR,EAAWC,EAAX;AACH,GAbD,MAaO;AACH;AACAD,IAAAA,EAAE,CAAClC,GAAH,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AACAmC,IAAAA,EAAE,CAACnC,GAAH,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AACH;AACJ,CApBD;AAsBA;AACA;AACA;AACA;AACA;;;AACAjB,IAAI,CAACU,SAAL,CAAe8C,QAAf,GAA0B,YAAU;AAChC,SAAO,KAAKrD,CAAL,GAAO,GAAP,GAAW,KAAKC,CAAhB,GAAkB,GAAlB,GAAsB,KAAKC,CAAlC;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAe+C,OAAf,GAAyB,YAAU;AAC/B,SAAO,CAAC,KAAKtD,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAegD,IAAf,GAAsB,UAASC,MAAT,EAAgB;AAClC,OAAKxD,CAAL,GAASwD,MAAM,CAACxD,CAAhB;AACA,OAAKC,CAAL,GAASuD,MAAM,CAACvD,CAAhB;AACA,OAAKC,CAAL,GAASsD,MAAM,CAACtD,CAAhB;AACA,SAAO,IAAP;AACH,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACU,SAAL,CAAekD,IAAf,GAAsB,UAAShD,CAAT,EAAWiD,CAAX,EAAahD,MAAb,EAAoB;AACtC,MAAIV,CAAC,GAAC,KAAKA,CAAX;AAAA,MAAcC,CAAC,GAAC,KAAKA,CAArB;AAAA,MAAwBC,CAAC,GAAC,KAAKA,CAA/B;AACAQ,EAAAA,MAAM,CAACV,CAAP,GAAWA,CAAC,GAAG,CAACS,CAAC,CAACT,CAAF,GAAIA,CAAL,IAAQ0D,CAAvB;AACAhD,EAAAA,MAAM,CAACT,CAAP,GAAWA,CAAC,GAAG,CAACQ,CAAC,CAACR,CAAF,GAAIA,CAAL,IAAQyD,CAAvB;AACAhD,EAAAA,MAAM,CAACR,CAAP,GAAWA,CAAC,GAAG,CAACO,CAAC,CAACP,CAAF,GAAIA,CAAL,IAAQwD,CAAvB;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7D,IAAI,CAACU,SAAL,CAAeoD,YAAf,GAA8B,UAASlD,CAAT,EAAWmD,SAAX,EAAqB;AAC/C,MAAGA,SAAS,KAAGC,SAAf,EAAyB;AACrBD,IAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,MAAIvC,IAAI,CAAC+B,GAAL,CAAS,KAAKpD,CAAL,GAAOS,CAAC,CAACT,CAAlB,IAAqB4D,SAArB,IACAvC,IAAI,CAAC+B,GAAL,CAAS,KAAKnD,CAAL,GAAOQ,CAAC,CAACR,CAAlB,IAAqB2D,SADrB,IAEAvC,IAAI,CAAC+B,GAAL,CAAS,KAAKlD,CAAL,GAAOO,CAAC,CAACP,CAAlB,IAAqB0D,SAFzB,EAEmC;AAC/B,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA/D,IAAI,CAACU,SAAL,CAAeuD,UAAf,GAA4B,UAASF,SAAT,EAAmB;AAC3C,MAAGA,SAAS,KAAGC,SAAf,EAAyB;AACrBD,IAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,MAAIvC,IAAI,CAAC+B,GAAL,CAAS,KAAKpD,CAAd,IAAiB4D,SAAjB,IACAvC,IAAI,CAAC+B,GAAL,CAAS,KAAKnD,CAAd,IAAiB2D,SADjB,IAEAvC,IAAI,CAAC+B,GAAL,CAAS,KAAKlD,CAAd,IAAiB0D,SAFrB,EAE+B;AAC3B,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CAVD;;AAYA,IAAIG,SAAS,GAAG,IAAIlE,IAAJ,EAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,IAAI,CAACU,SAAL,CAAeyD,gBAAf,GAAkC,UAASvD,CAAT,EAAWmD,SAAX,EAAqB;AACnD,OAAKhB,MAAL,CAAYmB,SAAZ;AACA,SAAOA,SAAS,CAACJ,YAAV,CAAuBlD,CAAvB,EAAyBmD,SAAzB,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACA/D,IAAI,CAACU,SAAL,CAAe0D,KAAf,GAAuB,YAAU;AAC7B,SAAO,IAAIpE,IAAJ,CAAS,KAAKG,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKC,CAA9B,CAAP;AACH,CAFD","sourcesContent":["module.exports = Vec3;\n\nvar Mat3 = require('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with an other vector, component-wise.\n * @method mult\n * @param {Number} vector\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n */\nVec3.prototype.vmul = function(vector, target){\n    target = target || new Vec3();\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n * @method addScaledVector\n * @param {Number} scalar\n * @param {Vec3} vector\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n */\nVec3.prototype.addScaledVector = function(scalar, vector, target){\n    target = target || new Vec3();\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n};\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};"]},"metadata":{},"sourceType":"script"}