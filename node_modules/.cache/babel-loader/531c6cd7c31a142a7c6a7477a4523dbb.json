{"ast":null,"code":"module.exports = Sphere;\n\nvar Shape = require('./Shape');\n\nvar Vec3 = require('../math/Vec3');\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\n\n\nfunction Sphere(radius) {\n  Shape.call(this, {\n    type: Shape.types.SPHERE\n  });\n  /**\n   * @property {Number} radius\n   */\n\n  this.radius = radius !== undefined ? radius : 1.0;\n\n  if (this.radius < 0) {\n    throw new Error('The sphere radius cannot be negative.');\n  }\n\n  this.updateBoundingSphereRadius();\n}\n\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function (mass, target) {\n  target = target || new Vec3();\n  var I = 2.0 * mass * this.radius * this.radius / 5.0;\n  target.x = I;\n  target.y = I;\n  target.z = I;\n  return target;\n};\n\nSphere.prototype.volume = function () {\n  return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function () {\n  this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function (pos, quat, min, max) {\n  var r = this.radius;\n  var axes = ['x', 'y', 'z'];\n\n  for (var i = 0; i < axes.length; i++) {\n    var ax = axes[i];\n    min[ax] = pos[ax] - r;\n    max[ax] = pos[ax] + r;\n  }\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/shapes/Sphere.js"],"names":["module","exports","Sphere","Shape","require","Vec3","radius","call","type","types","SPHERE","undefined","Error","updateBoundingSphereRadius","prototype","constructor","calculateLocalInertia","mass","target","I","x","y","z","volume","Math","PI","boundingSphereRadius","calculateWorldAABB","pos","quat","min","max","r","axes","i","length","ax"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,MAAT,CAAgBI,MAAhB,EAAuB;AACnBH,EAAAA,KAAK,CAACI,IAAN,CAAW,IAAX,EAAiB;AACbC,IAAAA,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC;AADL,GAAjB;AAIA;AACJ;AACA;;AACI,OAAKJ,MAAL,GAAcA,MAAM,KAAKK,SAAX,GAAuBL,MAAvB,GAAgC,GAA9C;;AAEA,MAAG,KAAKA,MAAL,GAAc,CAAjB,EAAmB;AACf,UAAM,IAAIM,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,OAAKC,0BAAL;AACH;;AACDX,MAAM,CAACY,SAAP,GAAmB,IAAIX,KAAJ,EAAnB;AACAD,MAAM,CAACY,SAAP,CAAiBC,WAAjB,GAA+Bb,MAA/B;;AAEAA,MAAM,CAACY,SAAP,CAAiBE,qBAAjB,GAAyC,UAASC,IAAT,EAAcC,MAAd,EAAqB;AAC1DA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIb,IAAJ,EAAnB;AACA,MAAIc,CAAC,GAAG,MAAIF,IAAJ,GAAS,KAAKX,MAAd,GAAqB,KAAKA,MAA1B,GAAiC,GAAzC;AACAY,EAAAA,MAAM,CAACE,CAAP,GAAWD,CAAX;AACAD,EAAAA,MAAM,CAACG,CAAP,GAAWF,CAAX;AACAD,EAAAA,MAAM,CAACI,CAAP,GAAWH,CAAX;AACA,SAAOD,MAAP;AACH,CAPD;;AASAhB,MAAM,CAACY,SAAP,CAAiBS,MAAjB,GAA0B,YAAU;AAChC,SAAO,MAAMC,IAAI,CAACC,EAAX,GAAgB,KAAKnB,MAArB,GAA8B,GAArC;AACH,CAFD;;AAIAJ,MAAM,CAACY,SAAP,CAAiBD,0BAAjB,GAA8C,YAAU;AACpD,OAAKa,oBAAL,GAA4B,KAAKpB,MAAjC;AACH,CAFD;;AAIAJ,MAAM,CAACY,SAAP,CAAiBa,kBAAjB,GAAsC,UAASC,GAAT,EAAaC,IAAb,EAAkBC,GAAlB,EAAsBC,GAAtB,EAA0B;AAC5D,MAAIC,CAAC,GAAG,KAAK1B,MAAb;AACA,MAAI2B,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAX;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,IAAI,CAACE,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5B,QAAIE,EAAE,GAAGH,IAAI,CAACC,CAAD,CAAb;AACAJ,IAAAA,GAAG,CAACM,EAAD,CAAH,GAAUR,GAAG,CAACQ,EAAD,CAAH,GAAUJ,CAApB;AACAD,IAAAA,GAAG,CAACK,EAAD,CAAH,GAAUR,GAAG,CAACQ,EAAD,CAAH,GAAUJ,CAApB;AACH;AACJ,CARD","sourcesContent":["module.exports = Sphere;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this, {\n        type: Shape.types.SPHERE\n    });\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}