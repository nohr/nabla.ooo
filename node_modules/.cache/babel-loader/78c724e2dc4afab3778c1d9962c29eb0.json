{"ast":null,"code":"module.exports = SPHSystem;\n\nvar Shape = require('../shapes/Shape');\n\nvar Vec3 = require('../math/Vec3');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar Particle = require('../shapes/Particle');\n\nvar Body = require('../objects/Body');\n\nvar Material = require('../material/Material');\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\n\n\nfunction SPHSystem() {\n  this.particles = [];\n  /**\n   * Density of the system (kg/m3).\n   * @property {number} density\n   */\n\n  this.density = 1;\n  /**\n   * Distance below which two particles are considered to be neighbors.\n   * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n   * @property {number} smoothingRadius\n   */\n\n  this.smoothingRadius = 1;\n  this.speedOfSound = 1;\n  /**\n   * Viscosity of the system.\n   * @property {number} viscosity\n   */\n\n  this.viscosity = 0.01;\n  this.eps = 0.000001; // Stuff Computed per particle\n\n  this.pressures = [];\n  this.densities = [];\n  this.neighbors = [];\n}\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\n\n\nSPHSystem.prototype.add = function (particle) {\n  this.particles.push(particle);\n\n  if (this.neighbors.length < this.particles.length) {\n    this.neighbors.push([]);\n  }\n};\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\n\n\nSPHSystem.prototype.remove = function (particle) {\n  var idx = this.particles.indexOf(particle);\n\n  if (idx !== -1) {\n    this.particles.splice(idx, 1);\n\n    if (this.neighbors.length > this.particles.length) {\n      this.neighbors.pop();\n    }\n  }\n};\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\n\n\nvar SPHSystem_getNeighbors_dist = new Vec3();\n\nSPHSystem.prototype.getNeighbors = function (particle, neighbors) {\n  var N = this.particles.length,\n      id = particle.id,\n      R2 = this.smoothingRadius * this.smoothingRadius,\n      dist = SPHSystem_getNeighbors_dist;\n\n  for (var i = 0; i !== N; i++) {\n    var p = this.particles[i];\n    p.position.vsub(particle.position, dist);\n\n    if (id !== p.id && dist.norm2() < R2) {\n      neighbors.push(p);\n    }\n  }\n}; // Temp vectors for calculation\n\n\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\n\nSPHSystem.prototype.update = function () {\n  var N = this.particles.length,\n      dist = SPHSystem_update_dist,\n      cs = this.speedOfSound,\n      eps = this.eps;\n\n  for (var i = 0; i !== N; i++) {\n    var p = this.particles[i]; // Current particle\n\n    var neighbors = this.neighbors[i]; // Get neighbors\n\n    neighbors.length = 0;\n    this.getNeighbors(p, neighbors);\n    neighbors.push(this.particles[i]); // Add current too\n\n    var numNeighbors = neighbors.length; // Accumulate density for the particle\n\n    var sum = 0.0;\n\n    for (var j = 0; j !== numNeighbors; j++) {\n      //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n      p.position.vsub(neighbors[j].position, dist);\n      var len = dist.norm();\n      var weight = this.w(len);\n      sum += neighbors[j].mass * weight;\n    } // Save\n\n\n    this.densities[i] = sum;\n    this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n  } // Add forces\n  // Sum to these accelerations\n\n\n  var a_pressure = SPHSystem_update_a_pressure;\n  var a_visc = SPHSystem_update_a_visc;\n  var gradW = SPHSystem_update_gradW;\n  var r_vec = SPHSystem_update_r_vec;\n  var u = SPHSystem_update_u;\n\n  for (var i = 0; i !== N; i++) {\n    var particle = this.particles[i];\n    a_pressure.set(0, 0, 0);\n    a_visc.set(0, 0, 0); // Init vars\n\n    var Pij;\n    var nabla;\n    var Vij; // Sum up for all other neighbors\n\n    var neighbors = this.neighbors[i];\n    var numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n    for (var j = 0; j !== numNeighbors; j++) {\n      var neighbor = neighbors[j]; //printf(\"%d \",nj);\n      // Get r once for all..\n\n      particle.position.vsub(neighbor.position, r_vec);\n      var r = r_vec.norm(); // Pressure contribution\n\n      Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n      this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n      gradW.mult(Pij, gradW);\n      a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n      neighbor.velocity.vsub(particle.velocity, u);\n      u.mult(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n      nabla = this.nablaw(r);\n      u.mult(nabla, u); // Add to viscosity acceleration\n\n      a_visc.vadd(u, a_visc);\n    } // Calculate force\n\n\n    a_visc.mult(particle.mass, a_visc);\n    a_pressure.mult(particle.mass, a_pressure); // Add force to particles\n\n    particle.force.vadd(a_visc, particle.force);\n    particle.force.vadd(a_pressure, particle.force);\n  }\n}; // Calculate the weight using the W(r) weightfunction\n\n\nSPHSystem.prototype.w = function (r) {\n  // 315\n  var h = this.smoothingRadius;\n  return 315.0 / (64.0 * Math.PI * Math.pow(h, 9)) * Math.pow(h * h - r * r, 3);\n}; // calculate gradient of the weight function\n\n\nSPHSystem.prototype.gradw = function (rVec, resultVec) {\n  var r = rVec.norm(),\n      h = this.smoothingRadius;\n  rVec.mult(945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * Math.pow(h * h - r * r, 2), resultVec);\n}; // Calculate nabla(W)\n\n\nSPHSystem.prototype.nablaw = function (r) {\n  var h = this.smoothingRadius;\n  var nabla = 945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n  return nabla;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/objects/SPHSystem.js"],"names":["module","exports","SPHSystem","Shape","require","Vec3","Quaternion","Particle","Body","Material","particles","density","smoothingRadius","speedOfSound","viscosity","eps","pressures","densities","neighbors","prototype","add","particle","push","length","remove","idx","indexOf","splice","pop","SPHSystem_getNeighbors_dist","getNeighbors","N","id","R2","dist","i","p","position","vsub","norm2","SPHSystem_update_dist","SPHSystem_update_a_pressure","SPHSystem_update_a_visc","SPHSystem_update_gradW","SPHSystem_update_r_vec","SPHSystem_update_u","update","cs","numNeighbors","sum","j","len","norm","weight","w","mass","a_pressure","a_visc","gradW","r_vec","u","set","Pij","nabla","Vij","neighbor","r","gradw","mult","vadd","velocity","nablaw","force","h","Math","PI","pow","rVec","resultVec"],"mappings":"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","sourcesContent":["module.exports = SPHSystem;\n\nvar Shape = require('../shapes/Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Particle = require('../shapes/Particle');\nvar Body = require('../objects/Body');\nvar Material = require('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n"]},"metadata":{},"sourceType":"script"}