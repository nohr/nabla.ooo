{"ast":null,"code":"module.exports = Pool;\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\n\nfunction Pool() {\n  /**\n   * The pooled objects\n   * @property {Array} objects\n   */\n  this.objects = [];\n  /**\n   * Constructor of the objects\n   * @property {mixed} type\n   */\n\n  this.type = Object;\n}\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\n\n\nPool.prototype.release = function () {\n  var Nargs = arguments.length;\n\n  for (var i = 0; i !== Nargs; i++) {\n    this.objects.push(arguments[i]);\n  }\n\n  return this;\n};\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\n\n\nPool.prototype.get = function () {\n  if (this.objects.length === 0) {\n    return this.constructObject();\n  } else {\n    return this.objects.pop();\n  }\n};\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\n\n\nPool.prototype.constructObject = function () {\n  throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n/**\n * @method resize\n * @param {number} size\n * @return {Pool} Self, for chaining\n */\n\n\nPool.prototype.resize = function (size) {\n  var objects = this.objects;\n\n  while (objects.length > size) {\n    objects.pop();\n  }\n\n  while (objects.length < size) {\n    objects.push(this.constructObject());\n  }\n\n  return this;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/utils/Pool.js"],"names":["module","exports","Pool","objects","type","Object","prototype","release","Nargs","arguments","length","i","push","get","constructObject","pop","Error","resize","size"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,GAAe;AACX;AACJ;AACA;AACA;AACI,OAAKC,OAAL,GAAe,EAAf;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,IAAL,GAAYC,MAAZ;AACH;AAED;AACA;AACA;AACA;AACA;;;AACAH,IAAI,CAACI,SAAL,CAAeC,OAAf,GAAyB,YAAU;AAC/B,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAtB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,KAAGH,KAAjB,EAAwBG,CAAC,EAAzB,EAA4B;AACxB,SAAKR,OAAL,CAAaS,IAAb,CAAkBH,SAAS,CAACE,CAAD,CAA3B;AACH;;AACD,SAAO,IAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAT,IAAI,CAACI,SAAL,CAAeO,GAAf,GAAqB,YAAU;AAC3B,MAAG,KAAKV,OAAL,CAAaO,MAAb,KAAsB,CAAzB,EAA2B;AACvB,WAAO,KAAKI,eAAL,EAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAKX,OAAL,CAAaY,GAAb,EAAP;AACH;AACJ,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAb,IAAI,CAACI,SAAL,CAAeQ,eAAf,GAAiC,YAAU;AACvC,QAAM,IAAIE,KAAJ,CAAU,8DAAV,CAAN;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAd,IAAI,CAACI,SAAL,CAAeW,MAAf,GAAwB,UAAUC,IAAV,EAAgB;AACpC,MAAIf,OAAO,GAAG,KAAKA,OAAnB;;AAEA,SAAOA,OAAO,CAACO,MAAR,GAAiBQ,IAAxB,EAA8B;AAC1Bf,IAAAA,OAAO,CAACY,GAAR;AACH;;AAED,SAAOZ,OAAO,CAACO,MAAR,GAAiBQ,IAAxB,EAA8B;AAC1Bf,IAAAA,OAAO,CAACS,IAAR,CAAa,KAAKE,eAAL,EAAb;AACH;;AAED,SAAO,IAAP;AACH,CAZD","sourcesContent":["module.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n    return this;\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n/**\n * @method resize\n * @param {number} size\n * @return {Pool} Self, for chaining\n */\nPool.prototype.resize = function (size) {\n    var objects = this.objects;\n\n    while (objects.length > size) {\n        objects.pop();\n    }\n\n    while (objects.length < size) {\n        objects.push(this.constructObject());\n    }\n\n    return this;\n};\n\n"]},"metadata":{},"sourceType":"script"}