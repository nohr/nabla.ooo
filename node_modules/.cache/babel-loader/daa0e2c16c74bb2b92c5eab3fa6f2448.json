{"ast":null,"code":"var Shape = require('./Shape');\n\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\n\nvar Vec3 = require('../math/Vec3');\n\nvar Utils = require('../utils/Utils');\n\nmodule.exports = Heightfield;\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\n\nfunction Heightfield(data, options) {\n  options = Utils.defaults(options, {\n    maxValue: null,\n    minValue: null,\n    elementSize: 1\n  });\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   * @property {array} data\n   */\n\n  this.data = data;\n  /**\n   * Max value of the data\n   * @property {number} maxValue\n   */\n\n  this.maxValue = options.maxValue;\n  /**\n   * Max value of the data\n   * @property {number} minValue\n   */\n\n  this.minValue = options.minValue;\n  /**\n   * The width of each element\n   * @property {number} elementSize\n   * @todo elementSizeX and Y\n   */\n\n  this.elementSize = options.elementSize;\n\n  if (options.minValue === null) {\n    this.updateMinValue();\n  }\n\n  if (options.maxValue === null) {\n    this.updateMaxValue();\n  }\n\n  this.cacheEnabled = true;\n  Shape.call(this, {\n    type: Shape.types.HEIGHTFIELD\n  });\n  this.pillarConvex = new ConvexPolyhedron();\n  this.pillarOffset = new Vec3();\n  this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n  // for example:\n  // _cachedPillars[\"0_2_1\"]\n\n  this._cachedPillars = {};\n}\n\nHeightfield.prototype = new Shape();\n/**\n * Call whenever you change the data array.\n * @method update\n */\n\nHeightfield.prototype.update = function () {\n  this._cachedPillars = {};\n};\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\n\n\nHeightfield.prototype.updateMinValue = function () {\n  var data = this.data;\n  var minValue = data[0][0];\n\n  for (var i = 0; i !== data.length; i++) {\n    for (var j = 0; j !== data[i].length; j++) {\n      var v = data[i][j];\n\n      if (v < minValue) {\n        minValue = v;\n      }\n    }\n  }\n\n  this.minValue = minValue;\n};\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\n\n\nHeightfield.prototype.updateMaxValue = function () {\n  var data = this.data;\n  var maxValue = data[0][0];\n\n  for (var i = 0; i !== data.length; i++) {\n    for (var j = 0; j !== data[i].length; j++) {\n      var v = data[i][j];\n\n      if (v > maxValue) {\n        maxValue = v;\n      }\n    }\n  }\n\n  this.maxValue = maxValue;\n};\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\n\n\nHeightfield.prototype.setHeightValueAtIndex = function (xi, yi, value) {\n  var data = this.data;\n  data[xi][yi] = value; // Invalidate cache\n\n  this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n  if (xi > 0) {\n    this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n    this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n  }\n\n  if (yi > 0) {\n    this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n    this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n  }\n\n  if (yi > 0 && xi > 0) {\n    this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n  }\n};\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\n\n\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n  result = result || []; // Get max and min of the data\n\n  var data = this.data,\n      max = this.minValue; // Set first value\n\n  for (var i = iMinX; i <= iMaxX; i++) {\n    for (var j = iMinY; j <= iMaxY; j++) {\n      var height = data[i][j];\n\n      if (height > max) {\n        max = height;\n      }\n    }\n  }\n\n  result[0] = this.minValue;\n  result[1] = max;\n};\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\n\n\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n  // Get the index of the data points to test against\n  var w = this.elementSize;\n  var data = this.data;\n  var xi = Math.floor(x / w);\n  var yi = Math.floor(y / w);\n  result[0] = xi;\n  result[1] = yi;\n\n  if (clamp) {\n    // Clamp index to edges\n    if (xi < 0) {\n      xi = 0;\n    }\n\n    if (yi < 0) {\n      yi = 0;\n    }\n\n    if (xi >= data.length - 1) {\n      xi = data.length - 1;\n    }\n\n    if (yi >= data[0].length - 1) {\n      yi = data[0].length - 1;\n    }\n  } // Bail out if we are out of the terrain\n\n\n  if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getHeightAt_idx = [];\nvar getHeightAt_weights = new Vec3();\nvar getHeightAt_a = new Vec3();\nvar getHeightAt_b = new Vec3();\nvar getHeightAt_c = new Vec3();\n\nHeightfield.prototype.getTriangleAt = function (x, y, edgeClamp, a, b, c) {\n  var idx = getHeightAt_idx;\n  this.getIndexOfPosition(x, y, idx, edgeClamp);\n  var xi = idx[0];\n  var yi = idx[1];\n  var data = this.data;\n\n  if (edgeClamp) {\n    xi = Math.min(data.length - 2, Math.max(0, xi));\n    yi = Math.min(data[0].length - 2, Math.max(0, yi));\n  }\n\n  var elementSize = this.elementSize;\n  var lowerDist2 = Math.pow(x / elementSize - xi, 2) + Math.pow(y / elementSize - yi, 2);\n  var upperDist2 = Math.pow(x / elementSize - (xi + 1), 2) + Math.pow(y / elementSize - (yi + 1), 2);\n  var upper = lowerDist2 > upperDist2;\n  this.getTriangle(xi, yi, upper, a, b, c);\n  return upper;\n};\n\nvar getNormalAt_a = new Vec3();\nvar getNormalAt_b = new Vec3();\nvar getNormalAt_c = new Vec3();\nvar getNormalAt_e0 = new Vec3();\nvar getNormalAt_e1 = new Vec3();\n\nHeightfield.prototype.getNormalAt = function (x, y, edgeClamp, result) {\n  var a = getNormalAt_a;\n  var b = getNormalAt_b;\n  var c = getNormalAt_c;\n  var e0 = getNormalAt_e0;\n  var e1 = getNormalAt_e1;\n  this.getTriangleAt(x, y, edgeClamp, a, b, c);\n  b.vsub(a, e0);\n  c.vsub(a, e1);\n  e0.cross(e1, result);\n  result.normalize();\n};\n/**\n * Get an AABB of a square in the heightfield\n * @param  {number} xi\n * @param  {number} yi\n * @param  {AABB} result\n */\n\n\nHeightfield.prototype.getAabbAtIndex = function (xi, yi, result) {\n  var data = this.data;\n  var elementSize = this.elementSize;\n  result.lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n  result.upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n};\n/**\n * Get the height in the heightfield at a given position\n * @param  {number} x\n * @param  {number} y\n * @param  {boolean} edgeClamp\n * @return {number}\n */\n\n\nHeightfield.prototype.getHeightAt = function (x, y, edgeClamp) {\n  var data = this.data;\n  var a = getHeightAt_a;\n  var b = getHeightAt_b;\n  var c = getHeightAt_c;\n  var idx = getHeightAt_idx;\n  this.getIndexOfPosition(x, y, idx, edgeClamp);\n  var xi = idx[0];\n  var yi = idx[1];\n\n  if (edgeClamp) {\n    xi = Math.min(data.length - 2, Math.max(0, xi));\n    yi = Math.min(data[0].length - 2, Math.max(0, yi));\n  }\n\n  var upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n  barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n  var w = getHeightAt_weights;\n\n  if (upper) {\n    // Top triangle verts\n    return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n  } else {\n    // Top triangle verts\n    return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n  }\n}; // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function (xi, yi, getUpperTriangle) {\n  return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle) {\n  return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle, convex, offset) {\n  this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n    convex: convex,\n    offset: offset\n  };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle) {\n  delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n/**\n * Get a triangle from the heightfield\n * @param  {number} xi\n * @param  {number} yi\n * @param  {boolean} upper\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\n\n\nHeightfield.prototype.getTriangle = function (xi, yi, upper, a, b, c) {\n  var data = this.data;\n  var elementSize = this.elementSize;\n\n  if (upper) {\n    // Top triangle verts\n    a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n    b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n  } else {\n    // Top triangle verts\n    a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n  }\n};\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\n\n\nHeightfield.prototype.getConvexTrianglePillar = function (xi, yi, getUpperTriangle) {\n  var result = this.pillarConvex;\n  var offsetResult = this.pillarOffset;\n\n  if (this.cacheEnabled) {\n    var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n    if (data) {\n      this.pillarConvex = data.convex;\n      this.pillarOffset = data.offset;\n      return;\n    }\n\n    result = new ConvexPolyhedron();\n    offsetResult = new Vec3();\n    this.pillarConvex = result;\n    this.pillarOffset = offsetResult;\n  }\n\n  var data = this.data;\n  var elementSize = this.elementSize;\n  var faces = result.faces; // Reuse verts if possible\n\n  result.vertices.length = 6;\n\n  for (var i = 0; i < 6; i++) {\n    if (!result.vertices[i]) {\n      result.vertices[i] = new Vec3();\n    }\n  } // Reuse faces if possible\n\n\n  faces.length = 5;\n\n  for (var i = 0; i < 5; i++) {\n    if (!faces[i]) {\n      faces[i] = [];\n    }\n  }\n\n  var verts = result.vertices;\n  var h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n  if (!getUpperTriangle) {\n    // Center of the triangle pillar - all polygons are given relative to this one\n    offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n    (yi + 0.25) * elementSize, h // vertical center\n    ); // Top triangle verts\n\n    verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n    verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n    verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n    verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -h - 1);\n    verts[4].set(0.75 * elementSize, -0.25 * elementSize, -h - 1);\n    verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -h - 1); // top triangle\n\n    faces[0][0] = 0;\n    faces[0][1] = 1;\n    faces[0][2] = 2; // bottom triangle\n\n    faces[1][0] = 5;\n    faces[1][1] = 4;\n    faces[1][2] = 3; // -x facing quad\n\n    faces[2][0] = 0;\n    faces[2][1] = 2;\n    faces[2][2] = 5;\n    faces[2][3] = 3; // -y facing quad\n\n    faces[3][0] = 1;\n    faces[3][1] = 0;\n    faces[3][2] = 3;\n    faces[3][3] = 4; // +xy facing quad\n\n    faces[4][0] = 4;\n    faces[4][1] = 5;\n    faces[4][2] = 2;\n    faces[4][3] = 1;\n  } else {\n    // Center of the triangle pillar - all polygons are given relative to this one\n    offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n    (yi + 0.75) * elementSize, h // vertical center\n    ); // Top triangle verts\n\n    verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n    verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n    verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n    verts[3].set(0.25 * elementSize, 0.25 * elementSize, -h - 1);\n    verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -h - 1);\n    verts[5].set(0.25 * elementSize, -0.75 * elementSize, -h - 1); // Top triangle\n\n    faces[0][0] = 0;\n    faces[0][1] = 1;\n    faces[0][2] = 2; // bottom triangle\n\n    faces[1][0] = 5;\n    faces[1][1] = 4;\n    faces[1][2] = 3; // +x facing quad\n\n    faces[2][0] = 2;\n    faces[2][1] = 5;\n    faces[2][2] = 3;\n    faces[2][3] = 0; // +y facing quad\n\n    faces[3][0] = 3;\n    faces[3][1] = 4;\n    faces[3][2] = 1;\n    faces[3][3] = 0; // -xy facing quad\n\n    faces[4][0] = 1;\n    faces[4][1] = 4;\n    faces[4][2] = 5;\n    faces[4][3] = 2;\n  }\n\n  result.computeNormals();\n  result.computeEdges();\n  result.updateBoundingSphereRadius();\n  this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function (mass, target) {\n  target = target || new Vec3();\n  target.set(0, 0, 0);\n  return target;\n};\n\nHeightfield.prototype.volume = function () {\n  return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function (pos, quat, min, max) {\n  // TODO: do it properly\n  min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n  max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function () {\n  // Use the bounding box of the min/max values\n  var data = this.data,\n      s = this.elementSize;\n  this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n/**\n * Sets the height values from an image. Currently only supported in browser.\n * @method setHeightsFromImage\n * @param {Image} image\n * @param {Vec3} scale\n */\n\n\nHeightfield.prototype.setHeightsFromImage = function (image, scale) {\n  var canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n  var context = canvas.getContext('2d');\n  context.drawImage(image, 0, 0);\n  var imageData = context.getImageData(0, 0, image.width, image.height);\n  var matrix = this.data;\n  matrix.length = 0;\n  this.elementSize = Math.abs(scale.x) / imageData.width;\n\n  for (var i = 0; i < imageData.height; i++) {\n    var row = [];\n\n    for (var j = 0; j < imageData.width; j++) {\n      var a = imageData.data[(i * imageData.height + j) * 4];\n      var b = imageData.data[(i * imageData.height + j) * 4 + 1];\n      var c = imageData.data[(i * imageData.height + j) * 4 + 2];\n      var height = (a + b + c) / 4 / 255 * scale.z;\n\n      if (scale.x < 0) {\n        row.push(height);\n      } else {\n        row.unshift(height);\n      }\n    }\n\n    if (scale.y < 0) {\n      matrix.unshift(row);\n    } else {\n      matrix.push(row);\n    }\n  }\n\n  this.updateMaxValue();\n  this.updateMinValue();\n  this.update();\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/shapes/Heightfield.js"],"names":["Shape","require","ConvexPolyhedron","Vec3","Utils","module","exports","Heightfield","data","options","defaults","maxValue","minValue","elementSize","updateMinValue","updateMaxValue","cacheEnabled","call","type","types","HEIGHTFIELD","pillarConvex","pillarOffset","updateBoundingSphereRadius","_cachedPillars","prototype","update","i","length","j","v","setHeightValueAtIndex","xi","yi","value","clearCachedConvexTrianglePillar","getRectMinMax","iMinX","iMinY","iMaxX","iMaxY","result","max","height","getIndexOfPosition","x","y","clamp","w","Math","floor","getHeightAt_idx","getHeightAt_weights","getHeightAt_a","getHeightAt_b","getHeightAt_c","getTriangleAt","edgeClamp","a","b","c","idx","min","lowerDist2","pow","upperDist2","upper","getTriangle","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","getNormalAt","e0","e1","vsub","cross","normalize","getAabbAtIndex","lowerBound","set","upperBound","getHeightAt","barycentricWeights","z","ax","ay","bx","by","cx","cy","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offset","getConvexTrianglePillar","offsetResult","faces","vertices","verts","h","computeNormals","computeEdges","calculateLocalInertia","mass","target","volume","Number","MAX_VALUE","calculateWorldAABB","pos","quat","s","boundingSphereRadius","abs","norm","setHeightsFromImage","image","scale","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","matrix","row","push","unshift"],"mappings":"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","sourcesContent":["var Shape = require('./Shape');\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\nvar Vec3 = require('../math/Vec3');\nvar Utils = require('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this, {\n        type: Shape.types.HEIGHTFIELD\n    });\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\n\nvar getHeightAt_idx = [];\nvar getHeightAt_weights = new Vec3();\nvar getHeightAt_a = new Vec3();\nvar getHeightAt_b = new Vec3();\nvar getHeightAt_c = new Vec3();\n\nHeightfield.prototype.getTriangleAt = function(x, y, edgeClamp, a, b, c){\n    var idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    var xi = idx[0];\n    var yi = idx[1];\n\n    var data = this.data;\n    if(edgeClamp){\n        xi = Math.min(data.length - 2, Math.max(0, xi));\n        yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    var elementSize = this.elementSize;\n    var lowerDist2 = Math.pow(x / elementSize - xi, 2) + Math.pow(y / elementSize - yi, 2);\n    var upperDist2 = Math.pow(x / elementSize - (xi + 1), 2) + Math.pow(y / elementSize - (yi + 1), 2);\n    var upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n};\n\nvar getNormalAt_a = new Vec3();\nvar getNormalAt_b = new Vec3();\nvar getNormalAt_c = new Vec3();\nvar getNormalAt_e0 = new Vec3();\nvar getNormalAt_e1 = new Vec3();\nHeightfield.prototype.getNormalAt = function(x, y, edgeClamp, result){\n    var a = getNormalAt_a;\n    var b = getNormalAt_b;\n    var c = getNormalAt_c;\n    var e0 = getNormalAt_e0;\n    var e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n};\n\n\n/**\n * Get an AABB of a square in the heightfield\n * @param  {number} xi\n * @param  {number} yi\n * @param  {AABB} result\n */\nHeightfield.prototype.getAabbAtIndex = function(xi, yi, result){\n    var data = this.data;\n    var elementSize = this.elementSize;\n\n    result.lowerBound.set(\n        xi * elementSize,\n        yi * elementSize,\n        data[xi][yi]\n    );\n    result.upperBound.set(\n        (xi + 1) * elementSize,\n        (yi + 1) * elementSize,\n        data[xi + 1][yi + 1]\n    );\n};\n\n\n/**\n * Get the height in the heightfield at a given position\n * @param  {number} x\n * @param  {number} y\n * @param  {boolean} edgeClamp\n * @return {number}\n */\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var data = this.data;\n    var a = getHeightAt_a;\n    var b = getHeightAt_b;\n    var c = getHeightAt_c;\n    var idx = getHeightAt_idx;\n\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    var xi = idx[0];\n    var yi = idx[1];\n    if(edgeClamp){\n        xi = Math.min(data.length - 2, Math.max(0, xi));\n        yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n    var upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n\n    var w = getHeightAt_weights;\n\n    if(upper){\n\n        // Top triangle verts\n        return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n\n    } else {\n\n        // Top triangle verts\n        return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n};\n\n// from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result){\n    result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n    result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n    result.z = 1 - result.x - result.y;\n}\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle from the heightfield\n * @param  {number} xi\n * @param  {number} yi\n * @param  {boolean} upper\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nHeightfield.prototype.getTriangle = function(xi, yi, upper, a, b, c){\n    var data = this.data;\n    var elementSize = this.elementSize;\n\n    if(upper){\n\n        // Top triangle verts\n        a.set(\n            (xi + 1) * elementSize,\n            (yi + 1) * elementSize,\n            data[xi + 1][yi + 1]\n        );\n        b.set(\n            xi * elementSize,\n            (yi + 1) * elementSize,\n            data[xi][yi + 1]\n        );\n        c.set(\n            (xi + 1) * elementSize,\n            yi * elementSize,\n            data[xi + 1][yi]\n        );\n\n    } else {\n\n        // Top triangle verts\n        a.set(\n            xi * elementSize,\n            yi * elementSize,\n            data[xi][yi]\n        );\n        b.set(\n            (xi + 1) * elementSize,\n            yi * elementSize,\n            data[xi + 1][yi]\n        );\n        c.set(\n            xi * elementSize,\n            (yi + 1) * elementSize,\n            data[xi][yi + 1]\n        );\n    }\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n/**\n * Sets the height values from an image. Currently only supported in browser.\n * @method setHeightsFromImage\n * @param {Image} image\n * @param {Vec3} scale\n */\nHeightfield.prototype.setHeightsFromImage = function(image, scale){\n    var canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    var imageData = context.getImageData(0, 0, image.width, image.height);\n\n    var matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(scale.x) / imageData.width;\n    for(var i=0; i<imageData.height; i++){\n        var row = [];\n        for(var j=0; j<imageData.width; j++){\n            var a = imageData.data[(i*imageData.height + j) * 4];\n            var b = imageData.data[(i*imageData.height + j) * 4 + 1];\n            var c = imageData.data[(i*imageData.height + j) * 4 + 2];\n            var height = (a + b + c) / 4 / 255 * scale.z;\n            if(scale.x < 0){\n                row.push(height);\n            } else {\n                row.unshift(height);\n            }\n        }\n        if(scale.y < 0){\n            matrix.unshift(row);\n        } else {\n            matrix.push(row);\n        }\n    }\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n};"]},"metadata":{},"sourceType":"script"}