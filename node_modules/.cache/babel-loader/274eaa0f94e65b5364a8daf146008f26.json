{"ast":null,"code":"module.exports = GridBroadphase;\n\nvar Broadphase = require('./Broadphase');\n\nvar Vec3 = require('../math/Vec3');\n\nvar Shape = require('../shapes/Shape');\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\n\n\nfunction GridBroadphase(aabbMin, aabbMax, nx, ny, nz) {\n  Broadphase.apply(this);\n  this.nx = nx || 10;\n  this.ny = ny || 10;\n  this.nz = nz || 10;\n  this.aabbMin = aabbMin || new Vec3(100, 100, 100);\n  this.aabbMax = aabbMax || new Vec3(-100, -100, -100);\n  var nbins = this.nx * this.ny * this.nz;\n\n  if (nbins <= 0) {\n    throw \"GridBroadphase: Each dimension's n must be >0\";\n  }\n\n  this.bins = [];\n  this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n  this.bins.length = nbins;\n  this.binLengths.length = nbins;\n\n  for (var i = 0; i < nbins; i++) {\n    this.bins[i] = [];\n    this.binLengths[i] = 0;\n  }\n}\n\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\n\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\n\nGridBroadphase.prototype.collisionPairs = function (world, pairs1, pairs2) {\n  var N = world.numObjects(),\n      bodies = world.bodies;\n  var max = this.aabbMax,\n      min = this.aabbMin,\n      nx = this.nx,\n      ny = this.ny,\n      nz = this.nz;\n  var xstep = ny * nz;\n  var ystep = nz;\n  var zstep = 1;\n  var xmax = max.x,\n      ymax = max.y,\n      zmax = max.z,\n      xmin = min.x,\n      ymin = min.y,\n      zmin = min.z;\n  var xmult = nx / (xmax - xmin),\n      ymult = ny / (ymax - ymin),\n      zmult = nz / (zmax - zmin);\n  var binsizeX = (xmax - xmin) / nx,\n      binsizeY = (ymax - ymin) / ny,\n      binsizeZ = (zmax - zmin) / nz;\n  var binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n  var types = Shape.types;\n  var SPHERE = types.SPHERE,\n      PLANE = types.PLANE,\n      BOX = types.BOX,\n      COMPOUND = types.COMPOUND,\n      CONVEXPOLYHEDRON = types.CONVEXPOLYHEDRON;\n  var bins = this.bins,\n      binLengths = this.binLengths,\n      Nbins = this.bins.length; // Reset bins\n\n  for (var i = 0; i !== Nbins; i++) {\n    binLengths[i] = 0;\n  }\n\n  var ceil = Math.ceil;\n  var min = Math.min;\n  var max = Math.max;\n\n  function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n    var xoff0 = (x0 - xmin) * xmult | 0,\n        yoff0 = (y0 - ymin) * ymult | 0,\n        zoff0 = (z0 - zmin) * zmult | 0,\n        xoff1 = ceil((x1 - xmin) * xmult),\n        yoff1 = ceil((y1 - ymin) * ymult),\n        zoff1 = ceil((z1 - zmin) * zmult);\n\n    if (xoff0 < 0) {\n      xoff0 = 0;\n    } else if (xoff0 >= nx) {\n      xoff0 = nx - 1;\n    }\n\n    if (yoff0 < 0) {\n      yoff0 = 0;\n    } else if (yoff0 >= ny) {\n      yoff0 = ny - 1;\n    }\n\n    if (zoff0 < 0) {\n      zoff0 = 0;\n    } else if (zoff0 >= nz) {\n      zoff0 = nz - 1;\n    }\n\n    if (xoff1 < 0) {\n      xoff1 = 0;\n    } else if (xoff1 >= nx) {\n      xoff1 = nx - 1;\n    }\n\n    if (yoff1 < 0) {\n      yoff1 = 0;\n    } else if (yoff1 >= ny) {\n      yoff1 = ny - 1;\n    }\n\n    if (zoff1 < 0) {\n      zoff1 = 0;\n    } else if (zoff1 >= nz) {\n      zoff1 = nz - 1;\n    }\n\n    xoff0 *= xstep;\n    yoff0 *= ystep;\n    zoff0 *= zstep;\n    xoff1 *= xstep;\n    yoff1 *= ystep;\n    zoff1 *= zstep;\n\n    for (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n      for (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n        for (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n          var idx = xoff + yoff + zoff;\n          bins[idx][binLengths[idx]++] = bi;\n        }\n      }\n    }\n  } // Put all bodies into the bins\n\n\n  for (var i = 0; i !== N; i++) {\n    var bi = bodies[i];\n    var si = bi.shape;\n\n    switch (si.type) {\n      case SPHERE:\n        // Put in bin\n        // check if overlap with other bins\n        var x = bi.position.x,\n            y = bi.position.y,\n            z = bi.position.z;\n        var r = si.radius;\n        addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n        break;\n\n      case PLANE:\n        if (si.worldNormalNeedsUpdate) {\n          si.computeWorldNormal(bi.quaternion);\n        }\n\n        var planeNormal = si.worldNormal; //Relative position from origin of plane object to the first bin\n        //Incremented as we iterate through the bins\n\n        var xreset = xmin + binsizeX * 0.5 - bi.position.x,\n            yreset = ymin + binsizeY * 0.5 - bi.position.y,\n            zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n        var d = GridBroadphase_collisionPairs_d;\n        d.set(xreset, yreset, zreset);\n\n        for (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n          for (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n            for (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n              if (d.dot(planeNormal) < binRadius) {\n                var idx = xoff + yoff + zoff;\n                bins[idx][binLengths[idx]++] = bi;\n              }\n            }\n          }\n        }\n\n        break;\n\n      default:\n        if (bi.aabbNeedsUpdate) {\n          bi.computeAABB();\n        }\n\n        addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n        break;\n    }\n  } // Check each bin\n\n\n  for (var i = 0; i !== Nbins; i++) {\n    var binLength = binLengths[i]; //Skip bins with no potential collisions\n\n    if (binLength > 1) {\n      var bin = bins[i]; // Do N^2 broadphase inside\n\n      for (var xi = 0; xi !== binLength; xi++) {\n        var bi = bin[xi];\n\n        for (var yi = 0; yi !== xi; yi++) {\n          var bj = bin[yi];\n\n          if (this.needBroadphaseCollision(bi, bj)) {\n            this.intersectionTest(bi, bj, pairs1, pairs2);\n          }\n        }\n      }\n    }\n  } //\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n  //\t\tconsole.log(\"layer \"+zi);\n  //\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n  //\t\t\tvar row = '';\n  //\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n  //\t\t\t\tvar idx = xoff + yoff + zoff;\n  //\t\t\t\trow += ' ' + binLengths[idx];\n  //\t\t\t}\n  //\t\t\tconsole.log(row);\n  //\t\t}\n  //\t}\n\n\n  this.makePairsUnique(pairs1, pairs2);\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/collision/GridBroadphase.js"],"names":["module","exports","GridBroadphase","Broadphase","require","Vec3","Shape","aabbMin","aabbMax","nx","ny","nz","apply","nbins","bins","binLengths","length","i","prototype","constructor","GridBroadphase_collisionPairs_d","GridBroadphase_collisionPairs_binPos","collisionPairs","world","pairs1","pairs2","N","numObjects","bodies","max","min","xstep","ystep","zstep","xmax","x","ymax","y","zmax","z","xmin","ymin","zmin","xmult","ymult","zmult","binsizeX","binsizeY","binsizeZ","binRadius","Math","sqrt","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","Nbins","ceil","addBoxToBins","x0","y0","z0","x1","y1","z1","bi","xoff0","yoff0","zoff0","xoff1","yoff1","zoff1","xoff","yoff","zoff","idx","si","shape","type","position","r","radius","worldNormalNeedsUpdate","computeWorldNormal","quaternion","planeNormal","worldNormal","xreset","yreset","zreset","d","set","xi","yi","zi","dot","aabbNeedsUpdate","computeAABB","aabb","lowerBound","upperBound","binLength","bin","bj","needBroadphaseCollision","intersectionTest","makePairsUnique"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,cAAjB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBK,OAAxB,EAAgCC,OAAhC,EAAwCC,EAAxC,EAA2CC,EAA3C,EAA8CC,EAA9C,EAAiD;AAC7CR,EAAAA,UAAU,CAACS,KAAX,CAAiB,IAAjB;AACA,OAAKH,EAAL,GAAUA,EAAE,IAAI,EAAhB;AACA,OAAKC,EAAL,GAAUA,EAAE,IAAI,EAAhB;AACA,OAAKC,EAAL,GAAUA,EAAE,IAAI,EAAhB;AACA,OAAKJ,OAAL,GAAeA,OAAO,IAAI,IAAIF,IAAJ,CAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CAA1B;AACA,OAAKG,OAAL,GAAeA,OAAO,IAAI,IAAIH,IAAJ,CAAS,CAAC,GAAV,EAAc,CAAC,GAAf,EAAmB,CAAC,GAApB,CAA1B;AACH,MAAIQ,KAAK,GAAG,KAAKJ,EAAL,GAAU,KAAKC,EAAf,GAAoB,KAAKC,EAArC;;AACA,MAAIE,KAAK,IAAI,CAAb,EAAgB;AACf,UAAM,+CAAN;AACA;;AACE,OAAKC,IAAL,GAAY,EAAZ;AACH,OAAKC,UAAL,GAAkB,EAAlB,CAZgD,CAY1B;;AACtB,OAAKD,IAAL,CAAUE,MAAV,GAAmBH,KAAnB;AACA,OAAKE,UAAL,CAAgBC,MAAhB,GAAyBH,KAAzB;;AACA,OAAK,IAAII,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACJ,KAAf,EAAqBI,CAAC,EAAtB,EAA0B;AACzB,SAAKH,IAAL,CAAUG,CAAV,IAAa,EAAb;AACA,SAAKF,UAAL,CAAgBE,CAAhB,IAAmB,CAAnB;AACA;AACD;;AACDf,cAAc,CAACgB,SAAf,GAA2B,IAAIf,UAAJ,EAA3B;AACAD,cAAc,CAACgB,SAAf,CAAyBC,WAAzB,GAAuCjB,cAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIkB,+BAA+B,GAAG,IAAIf,IAAJ,EAAtC;AACA,IAAIgB,oCAAoC,GAAG,IAAIhB,IAAJ,EAA3C;;AACAH,cAAc,CAACgB,SAAf,CAAyBI,cAAzB,GAA0C,UAASC,KAAT,EAAeC,MAAf,EAAsBC,MAAtB,EAA6B;AACnE,MAAIC,CAAC,GAAGH,KAAK,CAACI,UAAN,EAAR;AAAA,MACIC,MAAM,GAAGL,KAAK,CAACK,MADnB;AAGA,MAAIC,GAAG,GAAG,KAAKrB,OAAf;AAAA,MACIsB,GAAG,GAAG,KAAKvB,OADf;AAAA,MAEIE,EAAE,GAAG,KAAKA,EAFd;AAAA,MAGIC,EAAE,GAAG,KAAKA,EAHd;AAAA,MAIIC,EAAE,GAAG,KAAKA,EAJd;AAMH,MAAIoB,KAAK,GAAGrB,EAAE,GAACC,EAAf;AACA,MAAIqB,KAAK,GAAGrB,EAAZ;AACA,MAAIsB,KAAK,GAAG,CAAZ;AAEG,MAAIC,IAAI,GAAGL,GAAG,CAACM,CAAf;AAAA,MACIC,IAAI,GAAGP,GAAG,CAACQ,CADf;AAAA,MAEIC,IAAI,GAAGT,GAAG,CAACU,CAFf;AAAA,MAGIC,IAAI,GAAGV,GAAG,CAACK,CAHf;AAAA,MAIIM,IAAI,GAAGX,GAAG,CAACO,CAJf;AAAA,MAKIK,IAAI,GAAGZ,GAAG,CAACS,CALf;AAOA,MAAII,KAAK,GAAGlC,EAAE,IAAIyB,IAAI,GAACM,IAAT,CAAd;AAAA,MACII,KAAK,GAAGlC,EAAE,IAAI0B,IAAI,GAACK,IAAT,CADd;AAAA,MAEII,KAAK,GAAGlC,EAAE,IAAI2B,IAAI,GAACI,IAAT,CAFd;AAIA,MAAII,QAAQ,GAAG,CAACZ,IAAI,GAAGM,IAAR,IAAgB/B,EAA/B;AAAA,MACIsC,QAAQ,GAAG,CAACX,IAAI,GAAGK,IAAR,IAAgB/B,EAD/B;AAAA,MAEIsC,QAAQ,GAAG,CAACV,IAAI,GAAGI,IAAR,IAAgB/B,EAF/B;AAIH,MAAIsC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUL,QAAQ,GAACA,QAAT,GAAoBC,QAAQ,GAACA,QAA7B,GAAwCC,QAAQ,GAACA,QAA3D,IAAuE,GAAvF;AAEG,MAAII,KAAK,GAAG9C,KAAK,CAAC8C,KAAlB;AACA,MAAIC,MAAM,GAAcD,KAAK,CAACC,MAA9B;AAAA,MACIC,KAAK,GAAeF,KAAK,CAACE,KAD9B;AAAA,MAEIC,GAAG,GAAiBH,KAAK,CAACG,GAF9B;AAAA,MAGIC,QAAQ,GAAYJ,KAAK,CAACI,QAH9B;AAAA,MAIIC,gBAAgB,GAAIL,KAAK,CAACK,gBAJ9B;AAMA,MAAI3C,IAAI,GAAC,KAAKA,IAAd;AAAA,MACFC,UAAU,GAAC,KAAKA,UADd;AAAA,MAEI2C,KAAK,GAAC,KAAK5C,IAAL,CAAUE,MAFpB,CAtCmE,CA0CnE;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,KAAGyC,KAAjB,EAAwBzC,CAAC,EAAzB,EAA4B;AACxBF,IAAAA,UAAU,CAACE,CAAD,CAAV,GAAgB,CAAhB;AACH;;AAED,MAAI0C,IAAI,GAAGT,IAAI,CAACS,IAAhB;AACH,MAAI7B,GAAG,GAAGoB,IAAI,CAACpB,GAAf;AACA,MAAID,GAAG,GAAGqB,IAAI,CAACrB,GAAf;;AAEA,WAAS+B,YAAT,CAAsBC,EAAtB,EAAyBC,EAAzB,EAA4BC,EAA5B,EAA+BC,EAA/B,EAAkCC,EAAlC,EAAqCC,EAArC,EAAwCC,EAAxC,EAA4C;AAC3C,QAAIC,KAAK,GAAI,CAACP,EAAE,GAAGrB,IAAN,IAAcG,KAAf,GAAsB,CAAlC;AAAA,QACC0B,KAAK,GAAI,CAACP,EAAE,GAAGrB,IAAN,IAAcG,KAAf,GAAsB,CAD/B;AAAA,QAEC0B,KAAK,GAAI,CAACP,EAAE,GAAGrB,IAAN,IAAcG,KAAf,GAAsB,CAF/B;AAAA,QAGC0B,KAAK,GAAGZ,IAAI,CAAC,CAACK,EAAE,GAAGxB,IAAN,IAAcG,KAAf,CAHb;AAAA,QAIC6B,KAAK,GAAGb,IAAI,CAAC,CAACM,EAAE,GAAGxB,IAAN,IAAcG,KAAf,CAJb;AAAA,QAKC6B,KAAK,GAAGd,IAAI,CAAC,CAACO,EAAE,GAAGxB,IAAN,IAAcG,KAAf,CALb;;AAOA,QAAIuB,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI3D,EAAb,EAAiB;AAAE2D,MAAAA,KAAK,GAAG3D,EAAE,GAAG,CAAb;AAAiB;;AACvE,QAAI4D,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI3D,EAAb,EAAiB;AAAE2D,MAAAA,KAAK,GAAG3D,EAAE,GAAG,CAAb;AAAiB;;AACvE,QAAI4D,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI3D,EAAb,EAAiB;AAAE2D,MAAAA,KAAK,GAAG3D,EAAE,GAAG,CAAb;AAAiB;;AACvE,QAAI4D,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI9D,EAAb,EAAiB;AAAE8D,MAAAA,KAAK,GAAG9D,EAAE,GAAG,CAAb;AAAiB;;AACvE,QAAI+D,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI9D,EAAb,EAAiB;AAAE8D,MAAAA,KAAK,GAAG9D,EAAE,GAAG,CAAb;AAAiB;;AACvE,QAAI+D,KAAK,GAAG,CAAZ,EAAe;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY,KAA7B,MAAmC,IAAIA,KAAK,IAAI9D,EAAb,EAAiB;AAAE8D,MAAAA,KAAK,GAAG9D,EAAE,GAAG,CAAb;AAAiB;;AAEvEyD,IAAAA,KAAK,IAAIrC,KAAT;AACAsC,IAAAA,KAAK,IAAIrC,KAAT;AACAsC,IAAAA,KAAK,IAAIrC,KAAT;AACAsC,IAAAA,KAAK,IAAIxC,KAAT;AACAyC,IAAAA,KAAK,IAAIxC,KAAT;AACAyC,IAAAA,KAAK,IAAIxC,KAAT;;AAEA,SAAK,IAAIyC,IAAI,GAAGN,KAAhB,EAAuBM,IAAI,IAAIH,KAA/B,EAAsCG,IAAI,IAAI3C,KAA9C,EAAqD;AACpD,WAAK,IAAI4C,IAAI,GAAGN,KAAhB,EAAuBM,IAAI,IAAIH,KAA/B,EAAsCG,IAAI,IAAI3C,KAA9C,EAAqD;AACpD,aAAK,IAAI4C,IAAI,GAAGN,KAAhB,EAAuBM,IAAI,IAAIH,KAA/B,EAAsCG,IAAI,IAAI3C,KAA9C,EAAqD;AACpD,cAAI4C,GAAG,GAAGH,IAAI,GAACC,IAAL,GAAUC,IAApB;AACA9D,UAAAA,IAAI,CAAC+D,GAAD,CAAJ,CAAU9D,UAAU,CAAC8D,GAAD,CAAV,EAAV,IAA+BV,EAA/B;AACA;AACD;AACD;AACD,GAjFqE,CAmFnE;;;AACA,OAAI,IAAIlD,CAAC,GAAC,CAAV,EAAaA,CAAC,KAAGS,CAAjB,EAAoBT,CAAC,EAArB,EAAwB;AACpB,QAAIkD,EAAE,GAAGvC,MAAM,CAACX,CAAD,CAAf;AACA,QAAI6D,EAAE,GAAGX,EAAE,CAACY,KAAZ;;AAEA,YAAOD,EAAE,CAACE,IAAV;AACA,WAAK3B,MAAL;AACI;AACA;AACA,YAAIlB,CAAC,GAAGgC,EAAE,CAACc,QAAH,CAAY9C,CAApB;AAAA,YACIE,CAAC,GAAG8B,EAAE,CAACc,QAAH,CAAY5C,CADpB;AAAA,YAEIE,CAAC,GAAG4B,EAAE,CAACc,QAAH,CAAY1C,CAFpB;AAGA,YAAI2C,CAAC,GAAGJ,EAAE,CAACK,MAAX;AAETvB,QAAAA,YAAY,CAACzB,CAAC,GAAC+C,CAAH,EAAM7C,CAAC,GAAC6C,CAAR,EAAW3C,CAAC,GAAC2C,CAAb,EAAgB/C,CAAC,GAAC+C,CAAlB,EAAqB7C,CAAC,GAAC6C,CAAvB,EAA0B3C,CAAC,GAAC2C,CAA5B,EAA+Bf,EAA/B,CAAZ;AACS;;AAEJ,WAAKb,KAAL;AACI,YAAGwB,EAAE,CAACM,sBAAN,EAA6B;AACzBN,UAAAA,EAAE,CAACO,kBAAH,CAAsBlB,EAAE,CAACmB,UAAzB;AACH;;AACD,YAAIC,WAAW,GAAGT,EAAE,CAACU,WAArB,CAJJ,CAML;AACA;;AACA,YAAIC,MAAM,GAAGjD,IAAI,GAAGM,QAAQ,GAAC,GAAhB,GAAsBqB,EAAE,CAACc,QAAH,CAAY9C,CAA/C;AAAA,YACCuD,MAAM,GAAGjD,IAAI,GAAGM,QAAQ,GAAC,GAAhB,GAAsBoB,EAAE,CAACc,QAAH,CAAY5C,CAD5C;AAAA,YAECsD,MAAM,GAAGjD,IAAI,GAAGM,QAAQ,GAAC,GAAhB,GAAsBmB,EAAE,CAACc,QAAH,CAAY1C,CAF5C;AAIS,YAAIqD,CAAC,GAAGxE,+BAAR;AACTwE,QAAAA,CAAC,CAACC,GAAF,CAAMJ,MAAN,EAAcC,MAAd,EAAsBC,MAAtB;;AAEA,aAAK,IAAIG,EAAE,GAAG,CAAT,EAAYpB,IAAI,GAAG,CAAxB,EAA2BoB,EAAE,KAAKrF,EAAlC,EAAsCqF,EAAE,IAAIpB,IAAI,IAAI3C,KAAZ,EAAmB6D,CAAC,CAACvD,CAAF,GAAMqD,MAAzB,EAAiCE,CAAC,CAACzD,CAAF,IAAOW,QAAhF,EAA0F;AACzF,eAAK,IAAIiD,EAAE,GAAG,CAAT,EAAYpB,IAAI,GAAG,CAAxB,EAA2BoB,EAAE,KAAKrF,EAAlC,EAAsCqF,EAAE,IAAIpB,IAAI,IAAI3C,KAAZ,EAAmB4D,CAAC,CAACrD,CAAF,GAAMoD,MAAzB,EAAiCC,CAAC,CAACvD,CAAF,IAAOU,QAAhF,EAA0F;AACzF,iBAAK,IAAIiD,EAAE,GAAG,CAAT,EAAYpB,IAAI,GAAG,CAAxB,EAA2BoB,EAAE,KAAKrF,EAAlC,EAAsCqF,EAAE,IAAIpB,IAAI,IAAI3C,KAAZ,EAAmB2D,CAAC,CAACrD,CAAF,IAAOS,QAAlE,EAA4E;AAC3E,kBAAI4C,CAAC,CAACK,GAAF,CAAMV,WAAN,IAAqBtC,SAAzB,EAAoC;AACnC,oBAAI4B,GAAG,GAAGH,IAAI,GAAGC,IAAP,GAAcC,IAAxB;AACA9D,gBAAAA,IAAI,CAAC+D,GAAD,CAAJ,CAAU9D,UAAU,CAAC8D,GAAD,CAAV,EAAV,IAA+BV,EAA/B;AACA;AACD;AACD;AACD;;AACQ;;AAEJ;AACL,YAAIA,EAAE,CAAC+B,eAAP,EAAwB;AACvB/B,UAAAA,EAAE,CAACgC,WAAH;AACA;;AAEDvC,QAAAA,YAAY,CACXO,EAAE,CAACiC,IAAH,CAAQC,UAAR,CAAmBlE,CADR,EAEXgC,EAAE,CAACiC,IAAH,CAAQC,UAAR,CAAmBhE,CAFR,EAGX8B,EAAE,CAACiC,IAAH,CAAQC,UAAR,CAAmB9D,CAHR,EAIX4B,EAAE,CAACiC,IAAH,CAAQE,UAAR,CAAmBnE,CAJR,EAKXgC,EAAE,CAACiC,IAAH,CAAQE,UAAR,CAAmBjE,CALR,EAMX8B,EAAE,CAACiC,IAAH,CAAQE,UAAR,CAAmB/D,CANR,EAOX4B,EAPW,CAAZ;AAQS;AApDJ;AAsDH,GA9IkE,CAgJnE;;;AACA,OAAI,IAAIlD,CAAC,GAAC,CAAV,EAAaA,CAAC,KAAGyC,KAAjB,EAAwBzC,CAAC,EAAzB,EAA4B;AAC9B,QAAIsF,SAAS,GAAGxF,UAAU,CAACE,CAAD,CAA1B,CAD8B,CAE9B;;AACA,QAAIsF,SAAS,GAAG,CAAhB,EAAmB;AAClB,UAAIC,GAAG,GAAG1F,IAAI,CAACG,CAAD,CAAd,CADkB,CAGlB;;AACA,WAAI,IAAI6E,EAAE,GAAC,CAAX,EAAcA,EAAE,KAAGS,SAAnB,EAA8BT,EAAE,EAAhC,EAAmC;AAClC,YAAI3B,EAAE,GAAGqC,GAAG,CAACV,EAAD,CAAZ;;AACA,aAAI,IAAIC,EAAE,GAAC,CAAX,EAAcA,EAAE,KAAGD,EAAnB,EAAuBC,EAAE,EAAzB,EAA4B;AAC3B,cAAIU,EAAE,GAAGD,GAAG,CAACT,EAAD,CAAZ;;AACA,cAAG,KAAKW,uBAAL,CAA6BvC,EAA7B,EAAgCsC,EAAhC,CAAH,EAAuC;AACtC,iBAAKE,gBAAL,CAAsBxC,EAAtB,EAAyBsC,EAAzB,EAA4BjF,MAA5B,EAAmCC,MAAnC;AACA;AACD;AACD;AACD;AACE,GAlKkE,CAoKvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,OAAKmF,eAAL,CAAqBpF,MAArB,EAA4BC,MAA5B;AACH,CAjLD","sourcesContent":["module.exports = GridBroadphase;\n\nvar Broadphase = require('./Broadphase');\nvar Vec3 = require('../math/Vec3');\nvar Shape = require('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n"]},"metadata":{},"sourceType":"script"}