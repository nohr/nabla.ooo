{"ast":null,"code":"var Body = require('./Body');\n\nvar Sphere = require('../shapes/Sphere');\n\nvar Box = require('../shapes/Box');\n\nvar Vec3 = require('../math/Vec3');\n\nvar HingeConstraint = require('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\n\nfunction RigidVehicle(options) {\n  this.wheelBodies = [];\n  /**\n   * @property coordinateSystem\n   * @type {Vec3}\n   */\n\n  this.coordinateSystem = typeof options.coordinateSystem === 'undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n  /**\n   * @property {Body} chassisBody\n   */\n\n  this.chassisBody = options.chassisBody;\n\n  if (!this.chassisBody) {\n    // No chassis body given. Create it!\n    var chassisShape = new Box(new Vec3(5, 2, 0.5));\n    this.chassisBody = new Body(1, chassisShape);\n  }\n  /**\n   * @property constraints\n   * @type {Array}\n   */\n\n\n  this.constraints = [];\n  this.wheelAxes = [];\n  this.wheelForces = [];\n}\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\n\n\nRigidVehicle.prototype.addWheel = function (options) {\n  options = options || {};\n  var wheelBody = options.body;\n\n  if (!wheelBody) {\n    wheelBody = new Body(1, new Sphere(1.2));\n  }\n\n  this.wheelBodies.push(wheelBody);\n  this.wheelForces.push(0); // Position constrain wheels\n\n  var zero = new Vec3();\n  var position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n  var worldPosition = new Vec3();\n  this.chassisBody.pointToWorldFrame(position, worldPosition);\n  wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n  var axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n  this.wheelAxes.push(axis);\n  var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n    pivotA: position,\n    axisA: axis,\n    pivotB: Vec3.ZERO,\n    axisB: axis,\n    collideConnected: false\n  });\n  this.constraints.push(hingeConstraint);\n  return this.wheelBodies.length - 1;\n};\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\n\n\nRigidVehicle.prototype.setSteeringValue = function (value, wheelIndex) {\n  // Set angle of the hinge axis\n  var axis = this.wheelAxes[wheelIndex];\n  var c = Math.cos(value),\n      s = Math.sin(value),\n      x = axis.x,\n      y = axis.y;\n  this.constraints[wheelIndex].axisA.set(c * x - s * y, s * x + c * y, 0);\n};\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\n\n\nRigidVehicle.prototype.setMotorSpeed = function (value, wheelIndex) {\n  var hingeConstraint = this.constraints[wheelIndex];\n  hingeConstraint.enableMotor();\n  hingeConstraint.motorTargetVelocity = value;\n};\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\n\n\nRigidVehicle.prototype.disableMotor = function (wheelIndex) {\n  var hingeConstraint = this.constraints[wheelIndex];\n  hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\n\nRigidVehicle.prototype.setWheelForce = function (value, wheelIndex) {\n  this.wheelForces[wheelIndex] = value;\n};\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\n\n\nRigidVehicle.prototype.applyWheelForce = function (value, wheelIndex) {\n  var axis = this.wheelAxes[wheelIndex];\n  var wheelBody = this.wheelBodies[wheelIndex];\n  var bodyTorque = wheelBody.torque;\n  axis.scale(value, torque);\n  wheelBody.vectorToWorldFrame(torque, torque);\n  bodyTorque.vadd(torque, bodyTorque);\n};\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\n\n\nRigidVehicle.prototype.addToWorld = function (world) {\n  var constraints = this.constraints;\n  var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n  for (var i = 0; i < bodies.length; i++) {\n    world.addBody(bodies[i]);\n  }\n\n  for (var i = 0; i < constraints.length; i++) {\n    world.addConstraint(constraints[i]);\n  }\n\n  world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function () {\n  var wheelForces = this.wheelForces;\n\n  for (var i = 0; i < wheelForces.length; i++) {\n    this.applyWheelForce(wheelForces[i], i);\n  }\n};\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\n\n\nRigidVehicle.prototype.removeFromWorld = function (world) {\n  var constraints = this.constraints;\n  var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n  for (var i = 0; i < bodies.length; i++) {\n    world.remove(bodies[i]);\n  }\n\n  for (var i = 0; i < constraints.length; i++) {\n    world.removeConstraint(constraints[i]);\n  }\n};\n\nvar worldAxis = new Vec3();\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\n\nRigidVehicle.prototype.getWheelSpeed = function (wheelIndex) {\n  var axis = this.wheelAxes[wheelIndex];\n  var wheelBody = this.wheelBodies[wheelIndex];\n  var w = wheelBody.angularVelocity;\n  this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n  return w.dot(worldAxis);\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/objects/RigidVehicle.js"],"names":["Body","require","Sphere","Box","Vec3","HingeConstraint","module","exports","RigidVehicle","options","wheelBodies","coordinateSystem","clone","chassisBody","chassisShape","constraints","wheelAxes","wheelForces","prototype","addWheel","wheelBody","body","push","zero","position","worldPosition","pointToWorldFrame","set","x","y","z","axis","hingeConstraint","pivotA","axisA","pivotB","ZERO","axisB","collideConnected","length","setSteeringValue","value","wheelIndex","c","Math","cos","s","sin","setMotorSpeed","enableMotor","motorTargetVelocity","disableMotor","torque","setWheelForce","applyWheelForce","bodyTorque","scale","vectorToWorldFrame","vadd","addToWorld","world","bodies","concat","i","addBody","addConstraint","addEventListener","_update","bind","removeFromWorld","remove","removeConstraint","worldAxis","getWheelSpeed","w","angularVelocity","dot"],"mappings":"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","sourcesContent":["var Body = require('./Body');\nvar Sphere = require('../shapes/Sphere');\nvar Box = require('../shapes/Box');\nvar Vec3 = require('../math/Vec3');\nvar HingeConstraint = require('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.addBody(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n"]},"metadata":{},"sourceType":"script"}