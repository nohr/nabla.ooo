{"ast":null,"code":"module.exports = Mat3;\n\nvar Vec3 = require('./Vec3');\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\n\n\nfunction Mat3(elements) {\n  /**\n   * A vector of length 9, containing all matrix elements\n   * @property {Array} elements\n   */\n  if (elements) {\n    this.elements = elements;\n  } else {\n    this.elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  }\n}\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\n\n\nMat3.prototype.identity = function () {\n  var e = this.elements;\n  e[0] = 1;\n  e[1] = 0;\n  e[2] = 0;\n  e[3] = 0;\n  e[4] = 1;\n  e[5] = 0;\n  e[6] = 0;\n  e[7] = 0;\n  e[8] = 1;\n};\n/**\n * Set all elements to zero\n * @method setZero\n */\n\n\nMat3.prototype.setZero = function () {\n  var e = this.elements;\n  e[0] = 0;\n  e[1] = 0;\n  e[2] = 0;\n  e[3] = 0;\n  e[4] = 0;\n  e[5] = 0;\n  e[6] = 0;\n  e[7] = 0;\n  e[8] = 0;\n};\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\n\n\nMat3.prototype.setTrace = function (vec3) {\n  var e = this.elements;\n  e[0] = vec3.x;\n  e[4] = vec3.y;\n  e[8] = vec3.z;\n};\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\n\n\nMat3.prototype.getTrace = function (target) {\n  var target = target || new Vec3();\n  var e = this.elements;\n  target.x = e[0];\n  target.y = e[4];\n  target.z = e[8];\n};\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\n\n\nMat3.prototype.vmult = function (v, target) {\n  target = target || new Vec3();\n  var e = this.elements,\n      x = v.x,\n      y = v.y,\n      z = v.z;\n  target.x = e[0] * x + e[1] * y + e[2] * z;\n  target.y = e[3] * x + e[4] * y + e[5] * z;\n  target.z = e[6] * x + e[7] * y + e[8] * z;\n  return target;\n};\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\n\n\nMat3.prototype.smult = function (s) {\n  for (var i = 0; i < this.elements.length; i++) {\n    this.elements[i] *= s;\n  }\n};\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\n\n\nMat3.prototype.mmult = function (m, target) {\n  var r = target || new Mat3();\n\n  for (var i = 0; i < 3; i++) {\n    for (var j = 0; j < 3; j++) {\n      var sum = 0.0;\n\n      for (var k = 0; k < 3; k++) {\n        sum += m.elements[i + k * 3] * this.elements[k + j * 3];\n      }\n\n      r.elements[i + j * 3] = sum;\n    }\n  }\n\n  return r;\n};\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\n\n\nMat3.prototype.scale = function (v, target) {\n  target = target || new Mat3();\n  var e = this.elements,\n      t = target.elements;\n\n  for (var i = 0; i !== 3; i++) {\n    t[3 * i + 0] = v.x * e[3 * i + 0];\n    t[3 * i + 1] = v.y * e[3 * i + 1];\n    t[3 * i + 2] = v.z * e[3 * i + 2];\n  }\n\n  return target;\n};\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\n\n\nMat3.prototype.solve = function (b, target) {\n  target = target || new Vec3(); // Construct equations\n\n  var nr = 3; // num rows\n\n  var nc = 4; // num cols\n\n  var eqns = [];\n\n  for (var i = 0; i < nr * nc; i++) {\n    eqns.push(0);\n  }\n\n  var i, j;\n\n  for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++) {\n      eqns[i + nc * j] = this.elements[i + 3 * j];\n    }\n  }\n\n  eqns[3 + 4 * 0] = b.x;\n  eqns[3 + 4 * 1] = b.y;\n  eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n  var n = 3,\n      k = n,\n      np;\n  var kp = 4; // num rows\n\n  var p, els;\n\n  do {\n    i = k - n;\n\n    if (eqns[i + nc * i] === 0) {\n      // the pivot is null, swap lines\n      for (j = i + 1; j < k; j++) {\n        if (eqns[i + nc * j] !== 0) {\n          np = kp;\n\n          do {\n            // do ligne( i ) = ligne( i ) + ligne( k )\n            p = kp - np;\n            eqns[p + nc * i] += eqns[p + nc * j];\n          } while (--np);\n\n          break;\n        }\n      }\n    }\n\n    if (eqns[i + nc * i] !== 0) {\n      for (j = i + 1; j < k; j++) {\n        var multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = kp;\n\n        do {\n          // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n          p = kp - np;\n          eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      }\n    }\n  } while (--n); // Get the solution\n\n\n  target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n  target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n  target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n  if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n    throw \"Could not solve equation! Got x=[\" + target.toString() + \"], b=[\" + b.toString() + \"], A=[\" + this.toString() + \"]\";\n  }\n\n  return target;\n};\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\n\n\nMat3.prototype.e = function (row, column, value) {\n  if (value === undefined) {\n    return this.elements[column + 3 * row];\n  } else {\n    // Set value\n    this.elements[column + 3 * row] = value;\n  }\n};\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\n\n\nMat3.prototype.copy = function (source) {\n  for (var i = 0; i < source.elements.length; i++) {\n    this.elements[i] = source.elements[i];\n  }\n\n  return this;\n};\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\n\n\nMat3.prototype.toString = function () {\n  var r = \"\";\n  var sep = \",\";\n\n  for (var i = 0; i < 9; i++) {\n    r += this.elements[i] + sep;\n  }\n\n  return r;\n};\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\n\n\nMat3.prototype.reverse = function (target) {\n  target = target || new Mat3(); // Construct equations\n\n  var nr = 3; // num rows\n\n  var nc = 6; // num cols\n\n  var eqns = [];\n\n  for (var i = 0; i < nr * nc; i++) {\n    eqns.push(0);\n  }\n\n  var i, j;\n\n  for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++) {\n      eqns[i + nc * j] = this.elements[i + 3 * j];\n    }\n  }\n\n  eqns[3 + 6 * 0] = 1;\n  eqns[3 + 6 * 1] = 0;\n  eqns[3 + 6 * 2] = 0;\n  eqns[4 + 6 * 0] = 0;\n  eqns[4 + 6 * 1] = 1;\n  eqns[4 + 6 * 2] = 0;\n  eqns[5 + 6 * 0] = 0;\n  eqns[5 + 6 * 1] = 0;\n  eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n  var n = 3,\n      k = n,\n      np;\n  var kp = nc; // num rows\n\n  var p;\n\n  do {\n    i = k - n;\n\n    if (eqns[i + nc * i] === 0) {\n      // the pivot is null, swap lines\n      for (j = i + 1; j < k; j++) {\n        if (eqns[i + nc * j] !== 0) {\n          np = kp;\n\n          do {\n            // do line( i ) = line( i ) + line( k )\n            p = kp - np;\n            eqns[p + nc * i] += eqns[p + nc * j];\n          } while (--np);\n\n          break;\n        }\n      }\n    }\n\n    if (eqns[i + nc * i] !== 0) {\n      for (j = i + 1; j < k; j++) {\n        var multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = kp;\n\n        do {\n          // do line( k ) = line( k ) - multiplier * line( i )\n          p = kp - np;\n          eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      }\n    }\n  } while (--n); // eliminate the upper left triangle of the matrix\n\n\n  i = 2;\n\n  do {\n    j = i - 1;\n\n    do {\n      var multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (j--);\n  } while (--i); // operations on the diagonal\n\n\n  i = 2;\n\n  do {\n    var multiplier = 1 / eqns[i + nc * i];\n    np = nc;\n\n    do {\n      p = nc - np;\n      eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n    } while (--np);\n  } while (i--);\n\n  i = 2;\n\n  do {\n    j = 2;\n\n    do {\n      p = eqns[nr + j + nc * i];\n\n      if (isNaN(p) || p === Infinity) {\n        throw \"Could not reverse! A=[\" + this.toString() + \"]\";\n      }\n\n      target.e(i, j, p);\n    } while (j--);\n  } while (i--);\n\n  return target;\n};\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\n\n\nMat3.prototype.setRotationFromQuaternion = function (q) {\n  var x = q.x,\n      y = q.y,\n      z = q.z,\n      w = q.w,\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n      e = this.elements;\n  e[3 * 0 + 0] = 1 - (yy + zz);\n  e[3 * 0 + 1] = xy - wz;\n  e[3 * 0 + 2] = xz + wy;\n  e[3 * 1 + 0] = xy + wz;\n  e[3 * 1 + 1] = 1 - (xx + zz);\n  e[3 * 1 + 2] = yz - wx;\n  e[3 * 2 + 0] = xz - wy;\n  e[3 * 2 + 1] = yz + wx;\n  e[3 * 2 + 2] = 1 - (xx + yy);\n  return this;\n};\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\n\n\nMat3.prototype.transpose = function (target) {\n  target = target || new Mat3();\n  var Mt = target.elements,\n      M = this.elements;\n\n  for (var i = 0; i !== 3; i++) {\n    for (var j = 0; j !== 3; j++) {\n      Mt[3 * i + j] = M[3 * j + i];\n    }\n  }\n\n  return target;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/math/Mat3.js"],"names":["module","exports","Mat3","Vec3","require","elements","prototype","identity","e","setZero","setTrace","vec3","x","y","z","getTrace","target","vmult","v","smult","s","i","length","mmult","m","r","j","sum","k","scale","t","solve","b","nr","nc","eqns","push","n","np","kp","p","els","multiplier","isNaN","Infinity","toString","row","column","value","undefined","copy","source","sep","reverse","setRotationFromQuaternion","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M"],"mappings":"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","sourcesContent":["module.exports = Mat3;\n\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n"]},"metadata":{},"sourceType":"script"}