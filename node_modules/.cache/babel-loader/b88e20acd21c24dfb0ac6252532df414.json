{"ast":null,"code":"module.exports = Quaternion;\n\nvar Vec3 = require('./Vec3');\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\n\nfunction Quaternion(x, y, z, w) {\n  /**\n   * @property {Number} x\n   */\n  this.x = x !== undefined ? x : 0;\n  /**\n   * @property {Number} y\n   */\n\n  this.y = y !== undefined ? y : 0;\n  /**\n   * @property {Number} z\n   */\n\n  this.z = z !== undefined ? z : 0;\n  /**\n   * The multiplier of the real quaternion basis vector.\n   * @property {Number} w\n   */\n\n  this.w = w !== undefined ? w : 1;\n}\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\n\n\nQuaternion.prototype.set = function (x, y, z, w) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this.w = w;\n  return this;\n};\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\n\n\nQuaternion.prototype.toString = function () {\n  return this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w;\n};\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\n\n\nQuaternion.prototype.toArray = function () {\n  return [this.x, this.y, this.z, this.w];\n};\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\n\n\nQuaternion.prototype.setFromAxisAngle = function (axis, angle) {\n  var s = Math.sin(angle * 0.5);\n  this.x = axis.x * s;\n  this.y = axis.y * s;\n  this.z = axis.z * s;\n  this.w = Math.cos(angle * 0.5);\n  return this;\n};\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.\n * @return {Array} An array, first elemnt is the axis and the second is the angle in radians.\n */\n\n\nQuaternion.prototype.toAxisAngle = function (targetAxis) {\n  targetAxis = targetAxis || new Vec3();\n  this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n  var angle = 2 * Math.acos(this.w);\n  var s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n  if (s < 0.001) {\n    // test to avoid divide by zero, s is always positive due to sqrt\n    // if s close to zero then direction of axis not important\n    targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n    targetAxis.y = this.y;\n    targetAxis.z = this.z;\n  } else {\n    targetAxis.x = this.x / s; // normalise axis\n\n    targetAxis.y = this.y / s;\n    targetAxis.z = this.z / s;\n  }\n\n  return [targetAxis, angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\n\nQuaternion.prototype.setFromVectors = function (u, v) {\n  if (u.isAntiparallelTo(v)) {\n    var t1 = sfv_t1;\n    var t2 = sfv_t2;\n    u.tangents(t1, t2);\n    this.setFromAxisAngle(t1, Math.PI);\n  } else {\n    var a = u.cross(v);\n    this.x = a.x;\n    this.y = a.y;\n    this.z = a.z;\n    this.w = Math.sqrt(Math.pow(u.norm(), 2) * Math.pow(v.norm(), 2)) + u.dot(v);\n    this.normalize();\n  }\n\n  return this;\n};\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\n\n\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\n\nQuaternion.prototype.mult = function (q, target) {\n  target = target || new Quaternion();\n  var ax = this.x,\n      ay = this.y,\n      az = this.z,\n      aw = this.w,\n      bx = q.x,\n      by = q.y,\n      bz = q.z,\n      bw = q.w;\n  target.x = ax * bw + aw * bx + ay * bz - az * by;\n  target.y = ay * bw + aw * by + az * bx - ax * bz;\n  target.z = az * bw + aw * bz + ax * by - ay * bx;\n  target.w = aw * bw - ax * bx - ay * by - az * bz;\n  return target;\n};\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\n\n\nQuaternion.prototype.inverse = function (target) {\n  var x = this.x,\n      y = this.y,\n      z = this.z,\n      w = this.w;\n  target = target || new Quaternion();\n  this.conjugate(target);\n  var inorm2 = 1 / (x * x + y * y + z * z + w * w);\n  target.x *= inorm2;\n  target.y *= inorm2;\n  target.z *= inorm2;\n  target.w *= inorm2;\n  return target;\n};\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\n\n\nQuaternion.prototype.conjugate = function (target) {\n  target = target || new Quaternion();\n  target.x = -this.x;\n  target.y = -this.y;\n  target.z = -this.z;\n  target.w = this.w;\n  return target;\n};\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\n\n\nQuaternion.prototype.normalize = function () {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n  } else {\n    l = 1 / l;\n    this.x *= l;\n    this.y *= l;\n    this.z *= l;\n    this.w *= l;\n  }\n\n  return this;\n};\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\n\n\nQuaternion.prototype.normalizeFast = function () {\n  var f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n  if (f === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n  } else {\n    this.x *= f;\n    this.y *= f;\n    this.z *= f;\n    this.w *= f;\n  }\n\n  return this;\n};\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\n\n\nQuaternion.prototype.vmult = function (v, target) {\n  target = target || new Vec3();\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var qx = this.x,\n      qy = this.y,\n      qz = this.z,\n      qw = this.w; // q*v\n\n  var ix = qw * x + qy * z - qz * y,\n      iy = qw * y + qz * x - qx * z,\n      iz = qw * z + qx * y - qy * x,\n      iw = -qx * x - qy * y - qz * z;\n  target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  return target;\n};\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\n\n\nQuaternion.prototype.copy = function (source) {\n  this.x = source.x;\n  this.y = source.y;\n  this.z = source.z;\n  this.w = source.w;\n  return this;\n};\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\n\n\nQuaternion.prototype.toEuler = function (target, order) {\n  order = order || \"YZX\";\n  var heading, attitude, bank;\n  var x = this.x,\n      y = this.y,\n      z = this.z,\n      w = this.w;\n\n  switch (order) {\n    case \"YZX\":\n      var test = x * y + z * w;\n\n      if (test > 0.499) {\n        // singularity at north pole\n        heading = 2 * Math.atan2(x, w);\n        attitude = Math.PI / 2;\n        bank = 0;\n      }\n\n      if (test < -0.499) {\n        // singularity at south pole\n        heading = -2 * Math.atan2(x, w);\n        attitude = -Math.PI / 2;\n        bank = 0;\n      }\n\n      if (isNaN(heading)) {\n        var sqx = x * x;\n        var sqy = y * y;\n        var sqz = z * z;\n        heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n        attitude = Math.asin(2 * test); // attitude\n\n        bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n      }\n\n      break;\n\n    default:\n      throw new Error(\"Euler order \" + order + \" not supported yet.\");\n  }\n\n  target.y = heading;\n  target.z = attitude;\n  target.x = bank;\n};\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\n\n\nQuaternion.prototype.setFromEuler = function (x, y, z, order) {\n  order = order || \"XYZ\";\n  var c1 = Math.cos(x / 2);\n  var c2 = Math.cos(y / 2);\n  var c3 = Math.cos(z / 2);\n  var s1 = Math.sin(x / 2);\n  var s2 = Math.sin(y / 2);\n  var s3 = Math.sin(z / 2);\n\n  if (order === 'XYZ') {\n    this.x = s1 * c2 * c3 + c1 * s2 * s3;\n    this.y = c1 * s2 * c3 - s1 * c2 * s3;\n    this.z = c1 * c2 * s3 + s1 * s2 * c3;\n    this.w = c1 * c2 * c3 - s1 * s2 * s3;\n  } else if (order === 'YXZ') {\n    this.x = s1 * c2 * c3 + c1 * s2 * s3;\n    this.y = c1 * s2 * c3 - s1 * c2 * s3;\n    this.z = c1 * c2 * s3 - s1 * s2 * c3;\n    this.w = c1 * c2 * c3 + s1 * s2 * s3;\n  } else if (order === 'ZXY') {\n    this.x = s1 * c2 * c3 - c1 * s2 * s3;\n    this.y = c1 * s2 * c3 + s1 * c2 * s3;\n    this.z = c1 * c2 * s3 + s1 * s2 * c3;\n    this.w = c1 * c2 * c3 - s1 * s2 * s3;\n  } else if (order === 'ZYX') {\n    this.x = s1 * c2 * c3 - c1 * s2 * s3;\n    this.y = c1 * s2 * c3 + s1 * c2 * s3;\n    this.z = c1 * c2 * s3 - s1 * s2 * c3;\n    this.w = c1 * c2 * c3 + s1 * s2 * s3;\n  } else if (order === 'YZX') {\n    this.x = s1 * c2 * c3 + c1 * s2 * s3;\n    this.y = c1 * s2 * c3 + s1 * c2 * s3;\n    this.z = c1 * c2 * s3 - s1 * s2 * c3;\n    this.w = c1 * c2 * c3 - s1 * s2 * s3;\n  } else if (order === 'XZY') {\n    this.x = s1 * c2 * c3 - c1 * s2 * s3;\n    this.y = c1 * s2 * c3 - s1 * c2 * s3;\n    this.z = c1 * c2 * s3 + s1 * s2 * c3;\n    this.w = c1 * c2 * c3 + s1 * s2 * s3;\n  }\n\n  return this;\n};\n/**\n * @method clone\n * @return {Quaternion}\n */\n\n\nQuaternion.prototype.clone = function () {\n  return new Quaternion(this.x, this.y, this.z, this.w);\n};\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @method slerp\n * @param {Quaternion} toQuat second operand\n * @param {Number} t interpolation amount between the self quaternion and toQuat\n * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.\n * @returns {Quaternion} The \"target\" object\n */\n\n\nQuaternion.prototype.slerp = function (toQuat, t, target) {\n  target = target || new Quaternion();\n  var ax = this.x,\n      ay = this.y,\n      az = this.z,\n      aw = this.w,\n      bx = toQuat.x,\n      by = toQuat.y,\n      bz = toQuat.z,\n      bw = toQuat.w;\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  target.x = scale0 * ax + scale1 * bx;\n  target.y = scale0 * ay + scale1 * by;\n  target.z = scale0 * az + scale1 * bz;\n  target.w = scale0 * aw + scale1 * bw;\n  return target;\n};\n/**\n * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n * @param  {Vec3} angularVelocity\n * @param  {number} dt\n * @param  {Vec3} angularFactor\n * @param  {Quaternion} target\n * @return {Quaternion} The \"target\" object\n */\n\n\nQuaternion.prototype.integrate = function (angularVelocity, dt, angularFactor, target) {\n  target = target || new Quaternion();\n  var ax = angularVelocity.x * angularFactor.x,\n      ay = angularVelocity.y * angularFactor.y,\n      az = angularVelocity.z * angularFactor.z,\n      bx = this.x,\n      by = this.y,\n      bz = this.z,\n      bw = this.w;\n  var half_dt = dt * 0.5;\n  target.x += half_dt * (ax * bw + ay * bz - az * by);\n  target.y += half_dt * (ay * bw + az * bx - ax * bz);\n  target.z += half_dt * (az * bw + ax * by - ay * bx);\n  target.w += half_dt * (-ax * bx - ay * by - az * bz);\n  return target;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/math/Quaternion.js"],"names":["module","exports","Quaternion","Vec3","require","x","y","z","w","undefined","prototype","set","toString","toArray","setFromAxisAngle","axis","angle","s","Math","sin","cos","toAxisAngle","targetAxis","normalize","acos","sqrt","sfv_t1","sfv_t2","setFromVectors","u","v","isAntiparallelTo","t1","t2","tangents","PI","a","cross","pow","norm","dot","Quaternion_mult_va","Quaternion_mult_vb","Quaternion_mult_vaxvb","mult","q","target","ax","ay","az","aw","bx","by","bz","bw","inverse","conjugate","inorm2","l","normalizeFast","f","vmult","qx","qy","qz","qw","ix","iy","iz","iw","copy","source","toEuler","order","heading","attitude","bank","test","atan2","isNaN","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c2","c3","s1","s2","s3","clone","slerp","toQuat","t","omega","cosom","sinom","scale0","scale1","integrate","angularVelocity","dt","angularFactor","half_dt"],"mappings":"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","sourcesContent":["module.exports = Quaternion;\n\nvar Vec3 = require('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n    return this;\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.\n * @return {Array} An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n    return this;\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n\n    var ax = this.x, ay = this.y, az = this.z, aw = this.w,\n        bx = q.x, by = q.y, bz = q.z, bw = q.w;\n\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n    return this;\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n    return this;\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n};\n\n/**\n * @method clone\n * @return {Quaternion}\n */\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @method slerp\n * @param {Quaternion} toQuat second operand\n * @param {Number} t interpolation amount between the self quaternion and toQuat\n * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.\n * @returns {Quaternion} The \"target\" object\n */\nQuaternion.prototype.slerp = function (toQuat, t, target) {\n    target = target || new Quaternion();\n\n    var ax = this.x,\n        ay = this.y,\n        az = this.z,\n        aw = this.w,\n        bx = toQuat.x,\n        by = toQuat.y,\n        bz = toQuat.z,\n        bw = toQuat.w;\n\n    var omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n\n    // calculate final values\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n\n    return target;\n};\n\n/**\n * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n * @param  {Vec3} angularVelocity\n * @param  {number} dt\n * @param  {Vec3} angularFactor\n * @param  {Quaternion} target\n * @return {Quaternion} The \"target\" object\n */\nQuaternion.prototype.integrate = function(angularVelocity, dt, angularFactor, target){\n    target = target || new Quaternion();\n\n    var ax = angularVelocity.x * angularFactor.x,\n        ay = angularVelocity.y * angularFactor.y,\n        az = angularVelocity.z * angularFactor.z,\n        bx = this.x,\n        by = this.y,\n        bz = this.z,\n        bw = this.w;\n\n    var half_dt = dt * 0.5;\n\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (- ax * bx - ay * by - az * bz);\n\n    return target;\n};"]},"metadata":{},"sourceType":"script"}