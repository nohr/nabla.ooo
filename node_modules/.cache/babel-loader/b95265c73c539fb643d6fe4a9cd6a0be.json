{"ast":null,"code":"/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {};\n\nmodule.exports = EventTarget;\nEventTarget.prototype = {\n  constructor: EventTarget,\n\n  /**\n   * Add an event listener\n   * @method addEventListener\n   * @param  {String} type\n   * @param  {Function} listener\n   * @return {EventTarget} The self object, for chainability.\n   */\n  addEventListener: function (type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    var listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  },\n\n  /**\n   * Check if an event listener is added\n   * @method hasEventListener\n   * @param  {String} type\n   * @param  {Function} listener\n   * @return {Boolean}\n   */\n  hasEventListener: function (type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    var listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Check if any event listener of the given type is added\n   * @method hasAnyEventListener\n   * @param  {String} type\n   * @return {Boolean}\n   */\n  hasAnyEventListener: function (type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    var listeners = this._listeners;\n    return listeners[type] !== undefined;\n  },\n\n  /**\n   * Remove an event listener\n   * @method removeEventListener\n   * @param  {String} type\n   * @param  {Function} listener\n   * @return {EventTarget} The self object, for chainability.\n   */\n  removeEventListener: function (type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    var listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    var index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\n   * Emit an event.\n   * @method dispatchEvent\n   * @param  {Object} event\n   * @param  {String} event.type\n   * @return {EventTarget} The self object, for chainability.\n   */\n  dispatchEvent: function (event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    var listeners = this._listeners;\n    var listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (var i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/utils/EventTarget.js"],"names":["EventTarget","module","exports","prototype","constructor","addEventListener","type","listener","_listeners","undefined","listeners","indexOf","push","hasEventListener","hasAnyEventListener","removeEventListener","index","splice","dispatchEvent","event","listenerArray","target","i","l","length","call"],"mappings":"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","sourcesContent":["/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Check if any event listener of the given type is added\n     * @method hasAnyEventListener\n     * @param  {String} type\n     * @return {Boolean}\n     */\n    hasAnyEventListener: function ( type ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        return ( listeners[ type ] !== undefined );\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}