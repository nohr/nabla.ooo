{"ast":null,"code":"var Vec3 = require('../math/Vec3');\n\nmodule.exports = Spring;\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\n\nfunction Spring(bodyA, bodyB, options) {\n  options = options || {};\n  /**\n   * Rest length of the spring.\n   * @property restLength\n   * @type {number}\n   */\n\n  this.restLength = typeof options.restLength === \"number\" ? options.restLength : 1;\n  /**\n   * Stiffness of the spring.\n   * @property stiffness\n   * @type {number}\n   */\n\n  this.stiffness = options.stiffness || 100;\n  /**\n   * Damping of the spring.\n   * @property damping\n   * @type {number}\n   */\n\n  this.damping = options.damping || 1;\n  /**\n   * First connected body.\n   * @property bodyA\n   * @type {Body}\n   */\n\n  this.bodyA = bodyA;\n  /**\n   * Second connected body.\n   * @property bodyB\n   * @type {Body}\n   */\n\n  this.bodyB = bodyB;\n  /**\n   * Anchor for bodyA in local bodyA coordinates.\n   * @property localAnchorA\n   * @type {Vec3}\n   */\n\n  this.localAnchorA = new Vec3();\n  /**\n   * Anchor for bodyB in local bodyB coordinates.\n   * @property localAnchorB\n   * @type {Vec3}\n   */\n\n  this.localAnchorB = new Vec3();\n\n  if (options.localAnchorA) {\n    this.localAnchorA.copy(options.localAnchorA);\n  }\n\n  if (options.localAnchorB) {\n    this.localAnchorB.copy(options.localAnchorB);\n  }\n\n  if (options.worldAnchorA) {\n    this.setWorldAnchorA(options.worldAnchorA);\n  }\n\n  if (options.worldAnchorB) {\n    this.setWorldAnchorB(options.worldAnchorB);\n  }\n}\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\n\n\nSpring.prototype.setWorldAnchorA = function (worldAnchorA) {\n  this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n};\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\n\n\nSpring.prototype.setWorldAnchorB = function (worldAnchorB) {\n  this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n};\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\n\n\nSpring.prototype.getWorldAnchorA = function (result) {\n  this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n};\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\n\n\nSpring.prototype.getWorldAnchorB = function (result) {\n  this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n};\n\nvar applyForce_r = new Vec3(),\n    applyForce_r_unit = new Vec3(),\n    applyForce_u = new Vec3(),\n    applyForce_f = new Vec3(),\n    applyForce_worldAnchorA = new Vec3(),\n    applyForce_worldAnchorB = new Vec3(),\n    applyForce_ri = new Vec3(),\n    applyForce_rj = new Vec3(),\n    applyForce_ri_x_f = new Vec3(),\n    applyForce_rj_x_f = new Vec3(),\n    applyForce_tmp = new Vec3();\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\n\nSpring.prototype.applyForce = function () {\n  var k = this.stiffness,\n      d = this.damping,\n      l = this.restLength,\n      bodyA = this.bodyA,\n      bodyB = this.bodyB,\n      r = applyForce_r,\n      r_unit = applyForce_r_unit,\n      u = applyForce_u,\n      f = applyForce_f,\n      tmp = applyForce_tmp;\n  var worldAnchorA = applyForce_worldAnchorA,\n      worldAnchorB = applyForce_worldAnchorB,\n      ri = applyForce_ri,\n      rj = applyForce_rj,\n      ri_x_f = applyForce_ri_x_f,\n      rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n  this.getWorldAnchorA(worldAnchorA);\n  this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n  worldAnchorA.vsub(bodyA.position, ri);\n  worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n  worldAnchorB.vsub(worldAnchorA, r);\n  var rlen = r.norm();\n  r_unit.copy(r);\n  r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n  bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n  bodyB.angularVelocity.cross(rj, tmp);\n  u.vadd(tmp, u);\n  bodyA.angularVelocity.cross(ri, tmp);\n  u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n  r_unit.mult(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n  bodyA.force.vsub(f, bodyA.force);\n  bodyB.force.vadd(f, bodyB.force); // Angular force\n\n  ri.cross(f, ri_x_f);\n  rj.cross(f, rj_x_f);\n  bodyA.torque.vsub(ri_x_f, bodyA.torque);\n  bodyB.torque.vadd(rj_x_f, bodyB.torque);\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/objects/Spring.js"],"names":["Vec3","require","module","exports","Spring","bodyA","bodyB","options","restLength","stiffness","damping","localAnchorA","localAnchorB","copy","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","prototype","pointToLocalFrame","getWorldAnchorA","result","pointToWorldFrame","getWorldAnchorB","applyForce_r","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","applyForce_ri_x_f","applyForce_rj_x_f","applyForce_tmp","applyForce","k","d","l","r","r_unit","u","f","tmp","ri","rj","ri_x_f","rj_x_f","vsub","position","rlen","norm","normalize","velocity","angularVelocity","cross","vadd","mult","dot","force","torque"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAsBC,KAAtB,EAA4BC,OAA5B,EAAoC;AAChCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,UAAL,GAAkB,OAAOD,OAAO,CAACC,UAAf,KAA+B,QAA/B,GAA0CD,OAAO,CAACC,UAAlD,GAA+D,CAAjF;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,SAAL,GAAiBF,OAAO,CAACE,SAAR,IAAqB,GAAtC;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,OAAL,GAAeH,OAAO,CAACG,OAAR,IAAmB,CAAlC;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKL,KAAL,GAAaA,KAAb;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,KAAL,GAAaA,KAAb;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKK,YAAL,GAAoB,IAAIX,IAAJ,EAApB;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKY,YAAL,GAAoB,IAAIZ,IAAJ,EAApB;;AAEA,MAAGO,OAAO,CAACI,YAAX,EAAwB;AACpB,SAAKA,YAAL,CAAkBE,IAAlB,CAAuBN,OAAO,CAACI,YAA/B;AACH;;AACD,MAAGJ,OAAO,CAACK,YAAX,EAAwB;AACpB,SAAKA,YAAL,CAAkBC,IAAlB,CAAuBN,OAAO,CAACK,YAA/B;AACH;;AACD,MAAGL,OAAO,CAACO,YAAX,EAAwB;AACpB,SAAKC,eAAL,CAAqBR,OAAO,CAACO,YAA7B;AACH;;AACD,MAAGP,OAAO,CAACS,YAAX,EAAwB;AACpB,SAAKC,eAAL,CAAqBV,OAAO,CAACS,YAA7B;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;;;AACAZ,MAAM,CAACc,SAAP,CAAiBH,eAAjB,GAAmC,UAASD,YAAT,EAAsB;AACrD,OAAKT,KAAL,CAAWc,iBAAX,CAA6BL,YAA7B,EAA0C,KAAKH,YAA/C;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAP,MAAM,CAACc,SAAP,CAAiBD,eAAjB,GAAmC,UAASD,YAAT,EAAsB;AACrD,OAAKV,KAAL,CAAWa,iBAAX,CAA6BH,YAA7B,EAA0C,KAAKJ,YAA/C;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAR,MAAM,CAACc,SAAP,CAAiBE,eAAjB,GAAmC,UAASC,MAAT,EAAgB;AAC/C,OAAKhB,KAAL,CAAWiB,iBAAX,CAA6B,KAAKX,YAAlC,EAA+CU,MAA/C;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAjB,MAAM,CAACc,SAAP,CAAiBK,eAAjB,GAAmC,UAASF,MAAT,EAAgB;AAC/C,OAAKf,KAAL,CAAWgB,iBAAX,CAA6B,KAAKV,YAAlC,EAA+CS,MAA/C;AACH,CAFD;;AAIA,IAAIG,YAAY,GAAgB,IAAIxB,IAAJ,EAAhC;AAAA,IACIyB,iBAAiB,GAAW,IAAIzB,IAAJ,EADhC;AAAA,IAEI0B,YAAY,GAAgB,IAAI1B,IAAJ,EAFhC;AAAA,IAGI2B,YAAY,GAAgB,IAAI3B,IAAJ,EAHhC;AAAA,IAII4B,uBAAuB,GAAK,IAAI5B,IAAJ,EAJhC;AAAA,IAKI6B,uBAAuB,GAAK,IAAI7B,IAAJ,EALhC;AAAA,IAMI8B,aAAa,GAAe,IAAI9B,IAAJ,EANhC;AAAA,IAOI+B,aAAa,GAAe,IAAI/B,IAAJ,EAPhC;AAAA,IAQIgC,iBAAiB,GAAW,IAAIhC,IAAJ,EARhC;AAAA,IASIiC,iBAAiB,GAAW,IAAIjC,IAAJ,EAThC;AAAA,IAUIkC,cAAc,GAAc,IAAIlC,IAAJ,EAVhC;AAYA;AACA;AACA;AACA;;AACAI,MAAM,CAACc,SAAP,CAAiBiB,UAAjB,GAA8B,YAAU;AACpC,MAAIC,CAAC,GAAG,KAAK3B,SAAb;AAAA,MACI4B,CAAC,GAAG,KAAK3B,OADb;AAAA,MAEI4B,CAAC,GAAG,KAAK9B,UAFb;AAAA,MAGIH,KAAK,GAAG,KAAKA,KAHjB;AAAA,MAIIC,KAAK,GAAG,KAAKA,KAJjB;AAAA,MAKIiC,CAAC,GAAGf,YALR;AAAA,MAMIgB,MAAM,GAAGf,iBANb;AAAA,MAOIgB,CAAC,GAAGf,YAPR;AAAA,MAQIgB,CAAC,GAAGf,YARR;AAAA,MASIgB,GAAG,GAAGT,cATV;AAWA,MAAIpB,YAAY,GAAGc,uBAAnB;AAAA,MACIZ,YAAY,GAAGa,uBADnB;AAAA,MAEIe,EAAE,GAAGd,aAFT;AAAA,MAGIe,EAAE,GAAGd,aAHT;AAAA,MAIIe,MAAM,GAAGd,iBAJb;AAAA,MAKIe,MAAM,GAAGd,iBALb,CAZoC,CAmBpC;;AACA,OAAKb,eAAL,CAAqBN,YAArB;AACA,OAAKS,eAAL,CAAqBP,YAArB,EArBoC,CAuBpC;;AACAF,EAAAA,YAAY,CAACkC,IAAb,CAAkB3C,KAAK,CAAC4C,QAAxB,EAAiCL,EAAjC;AACA5B,EAAAA,YAAY,CAACgC,IAAb,CAAkB1C,KAAK,CAAC2C,QAAxB,EAAiCJ,EAAjC,EAzBoC,CA2BpC;;AACA7B,EAAAA,YAAY,CAACgC,IAAb,CAAkBlC,YAAlB,EAA+ByB,CAA/B;AACA,MAAIW,IAAI,GAAGX,CAAC,CAACY,IAAF,EAAX;AACAX,EAAAA,MAAM,CAAC3B,IAAP,CAAY0B,CAAZ;AACAC,EAAAA,MAAM,CAACY,SAAP,GA/BoC,CAiCpC;;AACA9C,EAAAA,KAAK,CAAC+C,QAAN,CAAeL,IAAf,CAAoB3C,KAAK,CAACgD,QAA1B,EAAmCZ,CAAnC,EAlCoC,CAmCpC;;AAEAnC,EAAAA,KAAK,CAACgD,eAAN,CAAsBC,KAAtB,CAA4BV,EAA5B,EAA+BF,GAA/B;AACAF,EAAAA,CAAC,CAACe,IAAF,CAAOb,GAAP,EAAWF,CAAX;AACApC,EAAAA,KAAK,CAACiD,eAAN,CAAsBC,KAAtB,CAA4BX,EAA5B,EAA+BD,GAA/B;AACAF,EAAAA,CAAC,CAACO,IAAF,CAAOL,GAAP,EAAWF,CAAX,EAxCoC,CA0CpC;;AACAD,EAAAA,MAAM,CAACiB,IAAP,CAAY,CAACrB,CAAD,IAAIc,IAAI,GAACZ,CAAT,IAAcD,CAAC,GAACI,CAAC,CAACiB,GAAF,CAAMlB,MAAN,CAA5B,EAA2CE,CAA3C,EA3CoC,CA6CpC;;AACArC,EAAAA,KAAK,CAACsD,KAAN,CAAYX,IAAZ,CAAiBN,CAAjB,EAAmBrC,KAAK,CAACsD,KAAzB;AACArD,EAAAA,KAAK,CAACqD,KAAN,CAAYH,IAAZ,CAAiBd,CAAjB,EAAmBpC,KAAK,CAACqD,KAAzB,EA/CoC,CAiDpC;;AACAf,EAAAA,EAAE,CAACW,KAAH,CAASb,CAAT,EAAWI,MAAX;AACAD,EAAAA,EAAE,CAACU,KAAH,CAASb,CAAT,EAAWK,MAAX;AACA1C,EAAAA,KAAK,CAACuD,MAAN,CAAaZ,IAAb,CAAkBF,MAAlB,EAAyBzC,KAAK,CAACuD,MAA/B;AACAtD,EAAAA,KAAK,CAACsD,MAAN,CAAaJ,IAAb,CAAkBT,MAAlB,EAAyBzC,KAAK,CAACsD,MAA/B;AACH,CAtDD","sourcesContent":["var Vec3 = require('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n"]},"metadata":{},"sourceType":"script"}