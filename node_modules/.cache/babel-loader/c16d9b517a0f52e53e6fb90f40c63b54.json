{"ast":null,"code":"module.exports = ConeTwistConstraint;\n\nvar Constraint = require('./Constraint');\n\nvar PointToPointConstraint = require('./PointToPointConstraint');\n\nvar ConeEquation = require('../equations/ConeEquation');\n\nvar RotationalEquation = require('../equations/RotationalEquation');\n\nvar ContactEquation = require('../equations/ContactEquation');\n\nvar Vec3 = require('../math/Vec3');\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\n\n\nfunction ConeTwistConstraint(bodyA, bodyB, options) {\n  options = options || {};\n  var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n  var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n  var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n  this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n  this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n  PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n  this.collideConnected = !!options.collideConnected;\n  this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  /**\n   * @property {ConeEquation} coneEquation\n   */\n\n  var c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n  /**\n   * @property {RotationalEquation} twistEquation\n   */\n\n  var t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n  this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n  c.maxForce = 0;\n  c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n  t.maxForce = 0;\n  t.minForce = -maxForce;\n  this.equations.push(c, t);\n}\n\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function () {\n  var bodyA = this.bodyA,\n      bodyB = this.bodyB,\n      cone = this.coneEquation,\n      twist = this.twistEquation;\n  PointToPointConstraint.prototype.update.call(this); // Update the axes to the cone constraint\n\n  bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n  bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n  this.axisA.tangents(twist.axisA, twist.axisA);\n  bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n  this.axisB.tangents(twist.axisB, twist.axisB);\n  bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n  cone.angle = this.angle;\n  twist.maxAngle = this.twistAngle;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/constraints/ConeTwistConstraint.js"],"names":["module","exports","ConeTwistConstraint","Constraint","require","PointToPointConstraint","ConeEquation","RotationalEquation","ContactEquation","Vec3","bodyA","bodyB","options","maxForce","pivotA","clone","pivotB","axisA","axisB","call","collideConnected","angle","c","coneEquation","t","twistEquation","twistAngle","minForce","equations","push","prototype","constructor","ConeTwistConstraint_update_tmpVec1","ConeTwistConstraint_update_tmpVec2","update","cone","twist","vectorToWorldFrame","tangents","maxAngle"],"mappings":"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","sourcesContent":["module.exports = ConeTwistConstraint;\n\nvar Constraint = require('./Constraint');\nvar PointToPointConstraint = require('./PointToPointConstraint');\nvar ConeEquation = require('../equations/ConeEquation');\nvar RotationalEquation = require('../equations/RotationalEquation');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n"]},"metadata":{},"sourceType":"script"}