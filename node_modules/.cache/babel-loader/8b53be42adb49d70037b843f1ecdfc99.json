{"ast":null,"code":"var Vec3 = require('../math/Vec3');\n\nvar Utils = require('../utils/Utils');\n\nmodule.exports = AABB;\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\n\nfunction AABB(options) {\n  options = options || {};\n  /**\n   * The lower bound of the bounding box.\n   * @property lowerBound\n   * @type {Vec3}\n   */\n\n  this.lowerBound = new Vec3();\n\n  if (options.lowerBound) {\n    this.lowerBound.copy(options.lowerBound);\n  }\n  /**\n   * The upper bound of the bounding box.\n   * @property upperBound\n   * @type {Vec3}\n   */\n\n\n  this.upperBound = new Vec3();\n\n  if (options.upperBound) {\n    this.upperBound.copy(options.upperBound);\n  }\n}\n\nvar tmp = new Vec3();\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\n\nAABB.prototype.setFromPoints = function (points, position, quaternion, skinSize) {\n  var l = this.lowerBound,\n      u = this.upperBound,\n      q = quaternion; // Set to the first point\n\n  l.copy(points[0]);\n\n  if (q) {\n    q.vmult(l, l);\n  }\n\n  u.copy(l);\n\n  for (var i = 1; i < points.length; i++) {\n    var p = points[i];\n\n    if (q) {\n      q.vmult(p, tmp);\n      p = tmp;\n    }\n\n    if (p.x > u.x) {\n      u.x = p.x;\n    }\n\n    if (p.x < l.x) {\n      l.x = p.x;\n    }\n\n    if (p.y > u.y) {\n      u.y = p.y;\n    }\n\n    if (p.y < l.y) {\n      l.y = p.y;\n    }\n\n    if (p.z > u.z) {\n      u.z = p.z;\n    }\n\n    if (p.z < l.z) {\n      l.z = p.z;\n    }\n  } // Add offset\n\n\n  if (position) {\n    position.vadd(l, l);\n    position.vadd(u, u);\n  }\n\n  if (skinSize) {\n    l.x -= skinSize;\n    l.y -= skinSize;\n    l.z -= skinSize;\n    u.x += skinSize;\n    u.y += skinSize;\n    u.z += skinSize;\n  }\n\n  return this;\n};\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\n\n\nAABB.prototype.copy = function (aabb) {\n  this.lowerBound.copy(aabb.lowerBound);\n  this.upperBound.copy(aabb.upperBound);\n  return this;\n};\n/**\n * Clone an AABB\n * @method clone\n */\n\n\nAABB.prototype.clone = function () {\n  return new AABB().copy(this);\n};\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\n\n\nAABB.prototype.extend = function (aabb) {\n  this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n  this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n  this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n  this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n  this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n  this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n};\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\n\n\nAABB.prototype.overlaps = function (aabb) {\n  var l1 = this.lowerBound,\n      u1 = this.upperBound,\n      l2 = aabb.lowerBound,\n      u2 = aabb.upperBound; //      l2        u2\n  //      |---------|\n  // |--------|\n  // l1       u1\n\n  var overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n  var overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n  var overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n  return overlapsX && overlapsY && overlapsZ;\n}; // Mostly for debugging\n\n\nAABB.prototype.volume = function () {\n  var l = this.lowerBound,\n      u = this.upperBound;\n  return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n};\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\n\n\nAABB.prototype.contains = function (aabb) {\n  var l1 = this.lowerBound,\n      u1 = this.upperBound,\n      l2 = aabb.lowerBound,\n      u2 = aabb.upperBound; //      l2        u2\n  //      |---------|\n  // |---------------|\n  // l1              u1\n\n  return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n};\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\n\n\nAABB.prototype.getCorners = function (a, b, c, d, e, f, g, h) {\n  var l = this.lowerBound,\n      u = this.upperBound;\n  a.copy(l);\n  b.set(u.x, l.y, l.z);\n  c.set(u.x, u.y, l.z);\n  d.set(l.x, u.y, u.z);\n  e.set(u.x, l.y, l.z);\n  f.set(l.x, u.y, l.z);\n  g.set(l.x, l.y, u.z);\n  h.copy(u);\n};\n\nvar transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\n\nAABB.prototype.toLocalFrame = function (frame, target) {\n  var corners = transformIntoFrame_corners;\n  var a = corners[0];\n  var b = corners[1];\n  var c = corners[2];\n  var d = corners[3];\n  var e = corners[4];\n  var f = corners[5];\n  var g = corners[6];\n  var h = corners[7]; // Get corners in current frame\n\n  this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n  for (var i = 0; i !== 8; i++) {\n    var corner = corners[i];\n    frame.pointToLocal(corner, corner);\n  }\n\n  return target.setFromPoints(corners);\n};\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\n\n\nAABB.prototype.toWorldFrame = function (frame, target) {\n  var corners = transformIntoFrame_corners;\n  var a = corners[0];\n  var b = corners[1];\n  var c = corners[2];\n  var d = corners[3];\n  var e = corners[4];\n  var f = corners[5];\n  var g = corners[6];\n  var h = corners[7]; // Get corners in current frame\n\n  this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n  for (var i = 0; i !== 8; i++) {\n    var corner = corners[i];\n    frame.pointToWorld(corner, corner);\n  }\n\n  return target.setFromPoints(corners);\n};\n/**\n * Check if the AABB is hit by a ray.\n * @param  {Ray} ray\n * @return {number}\n */\n\n\nAABB.prototype.overlapsRay = function (ray) {\n  var t = 0; // ray.direction is unit direction vector of ray\n\n  var dirFracX = 1 / ray._direction.x;\n  var dirFracY = 1 / ray._direction.y;\n  var dirFracZ = 1 / ray._direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n  var t1 = (this.lowerBound.x - ray.from.x) * dirFracX;\n  var t2 = (this.upperBound.x - ray.from.x) * dirFracX;\n  var t3 = (this.lowerBound.y - ray.from.y) * dirFracY;\n  var t4 = (this.upperBound.y - ray.from.y) * dirFracY;\n  var t5 = (this.lowerBound.z - ray.from.z) * dirFracZ;\n  var t6 = (this.upperBound.z - ray.from.z) * dirFracZ; // var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n  // var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n  var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n  var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n  if (tmax < 0) {\n    //t = tmax;\n    return false;\n  } // if tmin > tmax, ray doesn't intersect AABB\n\n\n  if (tmin > tmax) {\n    //t = tmax;\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/collision/AABB.js"],"names":["Vec3","require","Utils","module","exports","AABB","options","lowerBound","copy","upperBound","tmp","prototype","setFromPoints","points","position","quaternion","skinSize","l","u","q","vmult","i","length","p","x","y","z","vadd","aabb","clone","extend","Math","min","max","overlaps","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","volume","contains","getCorners","a","b","c","d","e","f","g","h","set","transformIntoFrame_corners","toLocalFrame","frame","target","corners","corner","pointToLocal","toWorldFrame","pointToWorld","overlapsRay","ray","t","dirFracX","_direction","dirFracY","dirFracZ","t1","from","t2","t3","t4","t5","t6","tmin","tmax"],"mappings":"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","sourcesContent":["var Vec3 = require('../math/Vec3');\nvar Utils = require('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    var overlapsX = ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x));\n    var overlapsY = ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y));\n    var overlapsZ = ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n\n    return overlapsX && overlapsY && overlapsZ;\n};\n\n// Mostly for debugging\nAABB.prototype.volume = function(){\n    var l = this.lowerBound,\n        u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n};\n\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Check if the AABB is hit by a ray.\n * @param  {Ray} ray\n * @return {number}\n */\nAABB.prototype.overlapsRay = function(ray){\n    var t = 0;\n\n    // ray.direction is unit direction vector of ray\n    var dirFracX = 1 / ray._direction.x;\n    var dirFracY = 1 / ray._direction.y;\n    var dirFracZ = 1 / ray._direction.z;\n\n    // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n    var t1 = (this.lowerBound.x - ray.from.x) * dirFracX;\n    var t2 = (this.upperBound.x - ray.from.x) * dirFracX;\n    var t3 = (this.lowerBound.y - ray.from.y) * dirFracY;\n    var t4 = (this.upperBound.y - ray.from.y) * dirFracY;\n    var t5 = (this.lowerBound.z - ray.from.z) * dirFracZ;\n    var t6 = (this.upperBound.z - ray.from.z) * dirFracZ;\n\n    // var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n    var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));\n\n    // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n    if (tmax < 0){\n        //t = tmax;\n        return false;\n    }\n\n    // if tmin > tmax, ray doesn't intersect AABB\n    if (tmin > tmax){\n        //t = tmax;\n        return false;\n    }\n\n    return true;\n};"]},"metadata":{},"sourceType":"script"}