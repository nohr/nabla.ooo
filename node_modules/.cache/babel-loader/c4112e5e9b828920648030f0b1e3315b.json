{"ast":null,"code":"module.exports = Box;\n\nvar Shape = require('./Shape');\n\nvar Vec3 = require('../math/Vec3');\n\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\n\n\nfunction Box(halfExtents) {\n  Shape.call(this, {\n    type: Shape.types.BOX\n  });\n  /**\n   * @property halfExtents\n   * @type {Vec3}\n   */\n\n  this.halfExtents = halfExtents;\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example\n   * @property convexPolyhedronRepresentation\n   * @type {ConvexPolyhedron}\n   */\n\n  this.convexPolyhedronRepresentation = null;\n  this.updateConvexPolyhedronRepresentation();\n  this.updateBoundingSphereRadius();\n}\n\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\n\nBox.prototype.updateConvexPolyhedronRepresentation = function () {\n  var sx = this.halfExtents.x;\n  var sy = this.halfExtents.y;\n  var sz = this.halfExtents.z;\n  var V = Vec3;\n  var vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n  var indices = [[3, 2, 1, 0], // -z\n  [4, 5, 6, 7], // +z\n  [5, 4, 0, 1], // -y\n  [2, 3, 7, 6], // +y\n  [0, 4, 7, 3], // -x\n  [1, 2, 6, 5] // +x\n  ];\n  var axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n  var h = new ConvexPolyhedron(vertices, indices);\n  this.convexPolyhedronRepresentation = h;\n  h.material = this.material;\n};\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\n\n\nBox.prototype.calculateLocalInertia = function (mass, target) {\n  target = target || new Vec3();\n  Box.calculateInertia(this.halfExtents, mass, target);\n  return target;\n};\n\nBox.calculateInertia = function (halfExtents, mass, target) {\n  var e = halfExtents;\n  target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n  target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n  target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n};\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\n\n\nBox.prototype.getSideNormals = function (sixTargetVectors, quat) {\n  var sides = sixTargetVectors;\n  var ex = this.halfExtents;\n  sides[0].set(ex.x, 0, 0);\n  sides[1].set(0, ex.y, 0);\n  sides[2].set(0, 0, ex.z);\n  sides[3].set(-ex.x, 0, 0);\n  sides[4].set(0, -ex.y, 0);\n  sides[5].set(0, 0, -ex.z);\n\n  if (quat !== undefined) {\n    for (var i = 0; i !== sides.length; i++) {\n      quat.vmult(sides[i], sides[i]);\n    }\n  }\n\n  return sides;\n};\n\nBox.prototype.volume = function () {\n  return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function () {\n  this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\n\nBox.prototype.forEachWorldCorner = function (pos, quat, callback) {\n  var e = this.halfExtents;\n  var corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n  for (var i = 0; i < corners.length; i++) {\n    worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n    quat.vmult(worldCornerTempPos, worldCornerTempPos);\n    pos.vadd(worldCornerTempPos, worldCornerTempPos);\n    callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n  }\n};\n\nvar worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\nBox.prototype.calculateWorldAABB = function (pos, quat, min, max) {\n  var e = this.halfExtents;\n  worldCornersTemp[0].set(e.x, e.y, e.z);\n  worldCornersTemp[1].set(-e.x, e.y, e.z);\n  worldCornersTemp[2].set(-e.x, -e.y, e.z);\n  worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n  worldCornersTemp[4].set(e.x, -e.y, -e.z);\n  worldCornersTemp[5].set(e.x, e.y, -e.z);\n  worldCornersTemp[6].set(-e.x, e.y, -e.z);\n  worldCornersTemp[7].set(e.x, -e.y, e.z);\n  var wc = worldCornersTemp[0];\n  quat.vmult(wc, wc);\n  pos.vadd(wc, wc);\n  max.copy(wc);\n  min.copy(wc);\n\n  for (var i = 1; i < 8; i++) {\n    var wc = worldCornersTemp[i];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    var x = wc.x;\n    var y = wc.y;\n    var z = wc.z;\n\n    if (x > max.x) {\n      max.x = x;\n    }\n\n    if (y > max.y) {\n      max.y = y;\n    }\n\n    if (z > max.z) {\n      max.z = z;\n    }\n\n    if (x < min.x) {\n      min.x = x;\n    }\n\n    if (y < min.y) {\n      min.y = y;\n    }\n\n    if (z < min.z) {\n      min.z = z;\n    }\n  } // Get each axis max\n  // min.set(Infinity,Infinity,Infinity);\n  // max.set(-Infinity,-Infinity,-Infinity);\n  // this.forEachWorldCorner(pos,quat,function(x,y,z){\n  //     if(x > max.x){\n  //         max.x = x;\n  //     }\n  //     if(y > max.y){\n  //         max.y = y;\n  //     }\n  //     if(z > max.z){\n  //         max.z = z;\n  //     }\n  //     if(x < min.x){\n  //         min.x = x;\n  //     }\n  //     if(y < min.y){\n  //         min.y = y;\n  //     }\n  //     if(z < min.z){\n  //         min.z = z;\n  //     }\n  // });\n\n};","map":{"version":3,"sources":["C:/Users/aite5/Desktop/nabla.ooo/node_modules/cannon/src/shapes/Box.js"],"names":["module","exports","Box","Shape","require","Vec3","ConvexPolyhedron","halfExtents","call","type","types","BOX","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","updateBoundingSphereRadius","prototype","constructor","sx","x","sy","y","sz","z","V","vertices","indices","axes","h","material","calculateLocalInertia","mass","target","calculateInertia","e","getSideNormals","sixTargetVectors","quat","sides","ex","set","undefined","i","length","vmult","volume","boundingSphereRadius","norm","worldCornerTempPos","worldCornerTempNeg","forEachWorldCorner","pos","callback","corners","vadd","worldCornersTemp","calculateWorldAABB","min","max","wc","copy"],"mappings":"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","sourcesContent":["module.exports = Box;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this, {\n        type: Shape.types.BOX\n    });\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n"]},"metadata":{},"sourceType":"script"}